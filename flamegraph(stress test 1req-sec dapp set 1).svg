<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="136"><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (1 samples, 0.74%)</title><rect x="0.0000%" y="693" width="0.7353%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;[T] as alloc::slice::SpecCloneIntoVec&lt;T,A&gt;&gt;::clone_into (1 samples, 0.74%)</title><rect x="0.0000%" y="677" width="0.7353%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;indexmap::Bucket&lt;K,V&gt; as core::clone::Clone&gt;::clone (1 samples, 0.74%)</title><rect x="0.0000%" y="661" width="0.7353%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;alloc::string::FromUtf8Error as core::fmt::Display&gt;::fmt (1 samples, 0.74%)</title><rect x="0.0000%" y="645" width="0.7353%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>aggregate_api (2 samples, 1.47%)</title><rect x="0.0000%" y="853" width="1.4706%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="863.50"></text></g><g><title>_start (2 samples, 1.47%)</title><rect x="0.0000%" y="837" width="1.4706%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="847.50"></text></g><g><title>__libc_start_main (2 samples, 1.47%)</title><rect x="0.0000%" y="821" width="1.4706%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="831.50"></text></g><g><title>main (2 samples, 1.47%)</title><rect x="0.0000%" y="805" width="1.4706%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="815.50"></text></g><g><title>std::rt::lang_start_internal (2 samples, 1.47%)</title><rect x="0.0000%" y="789" width="1.4706%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="799.50"></text></g><g><title>std::rt::lang_start::{{closure}} (2 samples, 1.47%)</title><rect x="0.0000%" y="773" width="1.4706%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2"/><text x="0.2500%" y="783.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2 samples, 1.47%)</title><rect x="0.0000%" y="757" width="1.4706%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="767.50"></text></g><g><title>aggregate_api::main (2 samples, 1.47%)</title><rect x="0.0000%" y="741" width="1.4706%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="751.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (2 samples, 1.47%)</title><rect x="0.0000%" y="725" width="1.4706%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="2"/><text x="0.2500%" y="735.50"></text></g><g><title>aggregate_api::main::{{closure}} (2 samples, 1.47%)</title><rect x="0.0000%" y="709" width="1.4706%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="719.50"></text></g><g><title>aggregate_api::load_resources::load_json (1 samples, 0.74%)</title><rect x="0.7353%" y="693" width="0.7353%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.9853%" y="703.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.74%)</title><rect x="0.7353%" y="677" width="0.7353%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.9853%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="0.7353%" y="661" width="0.7353%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.9853%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="0.7353%" y="645" width="0.7353%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.9853%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="0.7353%" y="629" width="0.7353%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.9853%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="0.7353%" y="613" width="0.7353%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.9853%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="0.7353%" y="597" width="0.7353%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.9853%" y="607.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.74%)</title><rect x="0.7353%" y="581" width="0.7353%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.9853%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="0.7353%" y="565" width="0.7353%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.9853%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="0.7353%" y="549" width="0.7353%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.9853%" y="559.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.74%)</title><rect x="0.7353%" y="533" width="0.7353%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.9853%" y="543.50"></text></g><g><title>__floattidf (1 samples, 0.74%)</title><rect x="5.1471%" y="693" width="0.7353%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="5.3971%" y="703.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.74%)</title><rect x="5.8824%" y="645" width="0.7353%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="1"/><text x="6.1324%" y="655.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.74%)</title><rect x="5.8824%" y="629" width="0.7353%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="1"/><text x="6.1324%" y="639.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (6 samples, 4.41%)</title><rect x="6.6176%" y="645" width="4.4118%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="6"/><text x="6.8676%" y="655.50">tokio..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (3 samples, 2.21%)</title><rect x="8.8235%" y="629" width="2.2059%" height="15" fill="rgb(232,36,49)" fg:x="12" fg:w="3"/><text x="9.0735%" y="639.50">t..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.74%)</title><rect x="10.2941%" y="613" width="0.7353%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="1"/><text x="10.5441%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.74%)</title><rect x="12.5000%" y="613" width="0.7353%" height="15" fill="rgb(229,88,8)" fg:x="17" fg:w="1"/><text x="12.7500%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.74%)</title><rect x="12.5000%" y="597" width="0.7353%" height="15" fill="rgb(213,181,19)" fg:x="17" fg:w="1"/><text x="12.7500%" y="607.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (4 samples, 2.94%)</title><rect x="11.0294%" y="645" width="2.9412%" height="15" fill="rgb(254,191,54)" fg:x="15" fg:w="4"/><text x="11.2794%" y="655.50">to..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (4 samples, 2.94%)</title><rect x="11.0294%" y="629" width="2.9412%" height="15" fill="rgb(241,83,37)" fg:x="15" fg:w="4"/><text x="11.2794%" y="639.50">to..</text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (1 samples, 0.74%)</title><rect x="13.2353%" y="613" width="0.7353%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="1"/><text x="13.4853%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.74%)</title><rect x="13.2353%" y="597" width="0.7353%" height="15" fill="rgb(226,3,54)" fg:x="18" fg:w="1"/><text x="13.4853%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.74%)</title><rect x="13.2353%" y="581" width="0.7353%" height="15" fill="rgb(245,192,40)" fg:x="18" fg:w="1"/><text x="13.4853%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (14 samples, 10.29%)</title><rect x="5.8824%" y="693" width="10.2941%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="14"/><text x="6.1324%" y="703.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (14 samples, 10.29%)</title><rect x="5.8824%" y="677" width="10.2941%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="14"/><text x="6.1324%" y="687.50">tokio::runtime:..</text></g><g><title>tokio::runtime::time::Driver::park_internal (14 samples, 10.29%)</title><rect x="5.8824%" y="661" width="10.2941%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="14"/><text x="6.1324%" y="671.50">tokio::runtime:..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 2.21%)</title><rect x="13.9706%" y="645" width="2.2059%" height="15" fill="rgb(208,69,12)" fg:x="19" fg:w="3"/><text x="14.2206%" y="655.50">t..</text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (2 samples, 1.47%)</title><rect x="14.7059%" y="629" width="1.4706%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="2"/><text x="14.9559%" y="639.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.74%)</title><rect x="16.9118%" y="677" width="0.7353%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="1"/><text x="17.1618%" y="687.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (1 samples, 0.74%)</title><rect x="19.8529%" y="581" width="0.7353%" height="15" fill="rgb(222,207,29)" fg:x="27" fg:w="1"/><text x="20.1029%" y="591.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (1 samples, 0.74%)</title><rect x="19.8529%" y="565" width="0.7353%" height="15" fill="rgb(206,96,30)" fg:x="27" fg:w="1"/><text x="20.1029%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::dispatch::Callback&lt;http::request::Request&lt;reqwest::async_impl::body::ImplStream&gt;,http::response::Response&lt;hyper::body::body::Body&gt;&gt;&gt; (1 samples, 0.74%)</title><rect x="19.8529%" y="549" width="0.7353%" height="15" fill="rgb(218,138,4)" fg:x="27" fg:w="1"/><text x="20.1029%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::error::Error&gt; (1 samples, 0.74%)</title><rect x="19.8529%" y="533" width="0.7353%" height="15" fill="rgb(250,191,14)" fg:x="27" fg:w="1"/><text x="20.1029%" y="543.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (2 samples, 1.47%)</title><rect x="20.5882%" y="581" width="1.4706%" height="15" fill="rgb(239,60,40)" fg:x="28" fg:w="2"/><text x="20.8382%" y="591.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (2 samples, 1.47%)</title><rect x="20.5882%" y="565" width="1.4706%" height="15" fill="rgb(206,27,48)" fg:x="28" fg:w="2"/><text x="20.8382%" y="575.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (1 samples, 0.74%)</title><rect x="22.0588%" y="581" width="0.7353%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="1"/><text x="22.3088%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (1 samples, 0.74%)</title><rect x="22.0588%" y="565" width="0.7353%" height="15" fill="rgb(250,213,24)" fg:x="30" fg:w="1"/><text x="22.3088%" y="575.50"></text></g><g><title>SSL_read_ex (5 samples, 3.68%)</title><rect x="22.7941%" y="485" width="3.6765%" height="15" fill="rgb(247,123,22)" fg:x="31" fg:w="5"/><text x="23.0441%" y="495.50">SSL_..</text></g><g><title>BIO_read (1 samples, 0.74%)</title><rect x="25.7353%" y="469" width="0.7353%" height="15" fill="rgb(231,138,38)" fg:x="35" fg:w="1"/><text x="25.9853%" y="479.50"></text></g><g><title>openssl::ssl::bio::bread (1 samples, 0.74%)</title><rect x="25.7353%" y="453" width="0.7353%" height="15" fill="rgb(231,145,46)" fg:x="35" fg:w="1"/><text x="25.9853%" y="463.50"></text></g><g><title>&lt;tokio_native_tls::AllowStd&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.74%)</title><rect x="25.7353%" y="437" width="0.7353%" height="15" fill="rgb(251,118,11)" fg:x="35" fg:w="1"/><text x="25.9853%" y="447.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (6 samples, 4.41%)</title><rect x="22.7941%" y="581" width="4.4118%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="6"/><text x="23.0441%" y="591.50">hyper..</text></g><g><title>hyper::proto::h1::decode::Decoder::decode (6 samples, 4.41%)</title><rect x="22.7941%" y="565" width="4.4118%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="6"/><text x="23.0441%" y="575.50">hyper..</text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (6 samples, 4.41%)</title><rect x="22.7941%" y="549" width="4.4118%" height="15" fill="rgb(209,12,38)" fg:x="31" fg:w="6"/><text x="23.0441%" y="559.50">&lt;hype..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (6 samples, 4.41%)</title><rect x="22.7941%" y="533" width="4.4118%" height="15" fill="rgb(227,1,9)" fg:x="31" fg:w="6"/><text x="23.0441%" y="543.50">hyper..</text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 4.41%)</title><rect x="22.7941%" y="517" width="4.4118%" height="15" fill="rgb(248,47,43)" fg:x="31" fg:w="6"/><text x="23.0441%" y="527.50">&lt;reqw..</text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (6 samples, 4.41%)</title><rect x="22.7941%" y="501" width="4.4118%" height="15" fill="rgb(221,10,30)" fg:x="31" fg:w="6"/><text x="23.0441%" y="511.50">tokio..</text></g><g><title>std::io::error::Error::kind (1 samples, 0.74%)</title><rect x="26.4706%" y="485" width="0.7353%" height="15" fill="rgb(210,229,1)" fg:x="36" fg:w="1"/><text x="26.7206%" y="495.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4 samples, 2.94%)</title><rect x="27.9412%" y="549" width="2.9412%" height="15" fill="rgb(222,148,37)" fg:x="38" fg:w="4"/><text x="28.1912%" y="559.50">hy..</text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 2.94%)</title><rect x="27.9412%" y="533" width="2.9412%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="4"/><text x="28.1912%" y="543.50">&lt;r..</text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (2 samples, 1.47%)</title><rect x="29.4118%" y="517" width="1.4706%" height="15" fill="rgb(247,98,35)" fg:x="40" fg:w="2"/><text x="29.6618%" y="527.50"></text></g><g><title>SSL_read_ex (2 samples, 1.47%)</title><rect x="29.4118%" y="501" width="1.4706%" height="15" fill="rgb(247,138,52)" fg:x="40" fg:w="2"/><text x="29.6618%" y="511.50"></text></g><g><title>BIO_read (1 samples, 0.74%)</title><rect x="30.1471%" y="485" width="0.7353%" height="15" fill="rgb(213,79,30)" fg:x="41" fg:w="1"/><text x="30.3971%" y="495.50"></text></g><g><title>openssl::ssl::bio::bread (1 samples, 0.74%)</title><rect x="30.1471%" y="469" width="0.7353%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="1"/><text x="30.3971%" y="479.50"></text></g><g><title>&lt;tokio_native_tls::AllowStd&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.74%)</title><rect x="30.1471%" y="453" width="0.7353%" height="15" fill="rgb(230,62,27)" fg:x="41" fg:w="1"/><text x="30.3971%" y="463.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.74%)</title><rect x="30.1471%" y="437" width="0.7353%" height="15" fill="rgb(216,154,8)" fg:x="41" fg:w="1"/><text x="30.3971%" y="447.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::try_append2 (1 samples, 0.74%)</title><rect x="30.8824%" y="517" width="0.7353%" height="15" fill="rgb(244,35,45)" fg:x="42" fg:w="1"/><text x="31.1324%" y="527.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (7 samples, 5.15%)</title><rect x="27.2059%" y="581" width="5.1471%" height="15" fill="rgb(251,115,12)" fg:x="37" fg:w="7"/><text x="27.4559%" y="591.50">hyper:..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (6 samples, 4.41%)</title><rect x="27.9412%" y="565" width="4.4118%" height="15" fill="rgb(240,54,50)" fg:x="38" fg:w="6"/><text x="28.1912%" y="575.50">hyper..</text></g><g><title>hyper::proto::h1::role::parse_headers (2 samples, 1.47%)</title><rect x="30.8824%" y="549" width="1.4706%" height="15" fill="rgb(233,84,52)" fg:x="42" fg:w="2"/><text x="31.1324%" y="559.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (2 samples, 1.47%)</title><rect x="30.8824%" y="533" width="1.4706%" height="15" fill="rgb(207,117,47)" fg:x="42" fg:w="2"/><text x="31.1324%" y="543.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (1 samples, 0.74%)</title><rect x="31.6176%" y="517" width="0.7353%" height="15" fill="rgb(249,43,39)" fg:x="43" fg:w="1"/><text x="31.8676%" y="527.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (1 samples, 0.74%)</title><rect x="31.6176%" y="501" width="0.7353%" height="15" fill="rgb(209,38,44)" fg:x="43" fg:w="1"/><text x="31.8676%" y="511.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (21 samples, 15.44%)</title><rect x="17.6471%" y="629" width="15.4412%" height="15" fill="rgb(236,212,23)" fg:x="24" fg:w="21"/><text x="17.8971%" y="639.50">&lt;hyper::client::conn::Co..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (20 samples, 14.71%)</title><rect x="18.3824%" y="613" width="14.7059%" height="15" fill="rgb(242,79,21)" fg:x="25" fg:w="20"/><text x="18.6324%" y="623.50">hyper::proto::h1::disp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (20 samples, 14.71%)</title><rect x="18.3824%" y="597" width="14.7059%" height="15" fill="rgb(211,96,35)" fg:x="25" fg:w="20"/><text x="18.6324%" y="607.50">hyper::proto::h1::disp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (1 samples, 0.74%)</title><rect x="32.3529%" y="581" width="0.7353%" height="15" fill="rgb(253,215,40)" fg:x="44" fg:w="1"/><text x="32.6029%" y="591.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (1 samples, 0.74%)</title><rect x="32.3529%" y="565" width="0.7353%" height="15" fill="rgb(211,81,21)" fg:x="44" fg:w="1"/><text x="32.6029%" y="575.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (1 samples, 0.74%)</title><rect x="32.3529%" y="549" width="0.7353%" height="15" fill="rgb(208,190,38)" fg:x="44" fg:w="1"/><text x="32.6029%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt; (1 samples, 0.74%)</title><rect x="33.0882%" y="629" width="0.7353%" height="15" fill="rgb(235,213,38)" fg:x="45" fg:w="1"/><text x="33.3382%" y="639.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (23 samples, 16.91%)</title><rect x="17.6471%" y="677" width="16.9118%" height="15" fill="rgb(237,122,38)" fg:x="24" fg:w="23"/><text x="17.8971%" y="687.50">tokio::runtime::task::harn..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (23 samples, 16.91%)</title><rect x="17.6471%" y="661" width="16.9118%" height="15" fill="rgb(244,218,35)" fg:x="24" fg:w="23"/><text x="17.8971%" y="671.50">tokio::runtime::task::core..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (23 samples, 16.91%)</title><rect x="17.6471%" y="645" width="16.9118%" height="15" fill="rgb(240,68,47)" fg:x="24" fg:w="23"/><text x="17.8971%" y="655.50">&lt;futures_util::future::fut..</text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::pool::Pooled&lt;hyper::client::client::PoolClient&lt;reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (1 samples, 0.74%)</title><rect x="33.8235%" y="629" width="0.7353%" height="15" fill="rgb(210,16,53)" fg:x="46" fg:w="1"/><text x="34.0735%" y="639.50"></text></g><g><title>&lt;hyper::client::pool::Pooled&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.74%)</title><rect x="33.8235%" y="613" width="0.7353%" height="15" fill="rgb(235,124,12)" fg:x="46" fg:w="1"/><text x="34.0735%" y="623.50"></text></g><g><title>hyper::client::pool::PoolInner&lt;T&gt;::put (1 samples, 0.74%)</title><rect x="33.8235%" y="597" width="0.7353%" height="15" fill="rgb(224,169,11)" fg:x="46" fg:w="1"/><text x="34.0735%" y="607.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (2 samples, 1.47%)</title><rect x="34.5588%" y="213" width="1.4706%" height="15" fill="rgb(250,166,2)" fg:x="47" fg:w="2"/><text x="34.8088%" y="223.50"></text></g><g><title>&lt;[T] as alloc::slice::SpecCloneIntoVec&lt;T,A&gt;&gt;::clone_into (2 samples, 1.47%)</title><rect x="34.5588%" y="197" width="1.4706%" height="15" fill="rgb(242,216,29)" fg:x="47" fg:w="2"/><text x="34.8088%" y="207.50"></text></g><g><title>&lt;indexmap::Bucket&lt;K,V&gt; as core::clone::Clone&gt;::clone (2 samples, 1.47%)</title><rect x="34.5588%" y="181" width="1.4706%" height="15" fill="rgb(230,116,27)" fg:x="47" fg:w="2"/><text x="34.8088%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 1.47%)</title><rect x="34.5588%" y="165" width="1.4706%" height="15" fill="rgb(228,99,48)" fg:x="47" fg:w="2"/><text x="34.8088%" y="175.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (2 samples, 1.47%)</title><rect x="34.5588%" y="149" width="1.4706%" height="15" fill="rgb(253,11,6)" fg:x="47" fg:w="2"/><text x="34.8088%" y="159.50"></text></g><g><title>&lt;[T] as alloc::slice::SpecCloneIntoVec&lt;T,A&gt;&gt;::clone_into (2 samples, 1.47%)</title><rect x="34.5588%" y="133" width="1.4706%" height="15" fill="rgb(247,143,39)" fg:x="47" fg:w="2"/><text x="34.8088%" y="143.50"></text></g><g><title>&lt;indexmap::Bucket&lt;K,V&gt; as core::clone::Clone&gt;::clone (2 samples, 1.47%)</title><rect x="34.5588%" y="117" width="1.4706%" height="15" fill="rgb(236,97,10)" fg:x="47" fg:w="2"/><text x="34.8088%" y="127.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (2 samples, 1.47%)</title><rect x="34.5588%" y="101" width="1.4706%" height="15" fill="rgb(233,208,19)" fg:x="47" fg:w="2"/><text x="34.8088%" y="111.50"></text></g><g><title>&lt;[T] as alloc::slice::SpecCloneIntoVec&lt;T,A&gt;&gt;::clone_into (2 samples, 1.47%)</title><rect x="34.5588%" y="85" width="1.4706%" height="15" fill="rgb(216,164,2)" fg:x="47" fg:w="2"/><text x="34.8088%" y="95.50"></text></g><g><title>&lt;indexmap::Bucket&lt;K,V&gt; as core::clone::Clone&gt;::clone (2 samples, 1.47%)</title><rect x="34.5588%" y="69" width="1.4706%" height="15" fill="rgb(220,129,5)" fg:x="47" fg:w="2"/><text x="34.8088%" y="79.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (2 samples, 1.47%)</title><rect x="34.5588%" y="53" width="1.4706%" height="15" fill="rgb(242,17,10)" fg:x="47" fg:w="2"/><text x="34.8088%" y="63.50"></text></g><g><title>&lt;[T] as alloc::slice::SpecCloneIntoVec&lt;T,A&gt;&gt;::clone_into (2 samples, 1.47%)</title><rect x="34.5588%" y="37" width="1.4706%" height="15" fill="rgb(242,107,0)" fg:x="47" fg:w="2"/><text x="34.8088%" y="47.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.74%)</title><rect x="36.0294%" y="149" width="0.7353%" height="15" fill="rgb(251,28,31)" fg:x="49" fg:w="1"/><text x="36.2794%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.74%)</title><rect x="36.0294%" y="133" width="0.7353%" height="15" fill="rgb(233,223,10)" fg:x="49" fg:w="1"/><text x="36.2794%" y="143.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.74%)</title><rect x="36.0294%" y="117" width="0.7353%" height="15" fill="rgb(215,21,27)" fg:x="49" fg:w="1"/><text x="36.2794%" y="127.50"></text></g><g><title>regex_automata::hybrid::dfa::Config::byte_classes_from_nfa (1 samples, 0.74%)</title><rect x="36.0294%" y="101" width="0.7353%" height="15" fill="rgb(232,23,21)" fg:x="49" fg:w="1"/><text x="36.2794%" y="111.50"></text></g><g><title>aggregate_api::paths::validate_params::validate_required_params (2 samples, 1.47%)</title><rect x="36.0294%" y="213" width="1.4706%" height="15" fill="rgb(244,5,23)" fg:x="49" fg:w="2"/><text x="36.2794%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (2 samples, 1.47%)</title><rect x="36.0294%" y="197" width="1.4706%" height="15" fill="rgb(226,81,46)" fg:x="49" fg:w="2"/><text x="36.2794%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (2 samples, 1.47%)</title><rect x="36.0294%" y="181" width="1.4706%" height="15" fill="rgb(247,70,30)" fg:x="49" fg:w="2"/><text x="36.2794%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (2 samples, 1.47%)</title><rect x="36.0294%" y="165" width="1.4706%" height="15" fill="rgb(212,68,19)" fg:x="49" fg:w="2"/><text x="36.2794%" y="175.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.74%)</title><rect x="36.7647%" y="149" width="0.7353%" height="15" fill="rgb(240,187,13)" fg:x="50" fg:w="1"/><text x="37.0147%" y="159.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.74%)</title><rect x="36.7647%" y="133" width="0.7353%" height="15" fill="rgb(223,113,26)" fg:x="50" fg:w="1"/><text x="37.0147%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.74%)</title><rect x="36.7647%" y="117" width="0.7353%" height="15" fill="rgb(206,192,2)" fg:x="50" fg:w="1"/><text x="37.0147%" y="127.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.74%)</title><rect x="36.7647%" y="101" width="0.7353%" height="15" fill="rgb(241,108,4)" fg:x="50" fg:w="1"/><text x="37.0147%" y="111.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.74%)</title><rect x="36.7647%" y="85" width="0.7353%" height="15" fill="rgb(247,173,49)" fg:x="50" fg:w="1"/><text x="37.0147%" y="95.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="661" width="3.6765%" height="15" fill="rgb(224,114,35)" fg:x="47" fg:w="5"/><text x="34.8088%" y="671.50">&lt;hyp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (5 samples, 3.68%)</title><rect x="34.5588%" y="645" width="3.6765%" height="15" fill="rgb(245,159,27)" fg:x="47" fg:w="5"/><text x="34.8088%" y="655.50">hype..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="629" width="3.6765%" height="15" fill="rgb(245,172,44)" fg:x="47" fg:w="5"/><text x="34.8088%" y="639.50">&lt;axu..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="613" width="3.6765%" height="15" fill="rgb(236,23,11)" fg:x="47" fg:w="5"/><text x="34.8088%" y="623.50">&lt;tow..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="597" width="3.6765%" height="15" fill="rgb(205,117,38)" fg:x="47" fg:w="5"/><text x="34.8088%" y="607.50">&lt;tow..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="581" width="3.6765%" height="15" fill="rgb(237,72,25)" fg:x="47" fg:w="5"/><text x="34.8088%" y="591.50">&lt;fut..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="565" width="3.6765%" height="15" fill="rgb(244,70,9)" fg:x="47" fg:w="5"/><text x="34.8088%" y="575.50">&lt;fut..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="549" width="3.6765%" height="15" fill="rgb(217,125,39)" fg:x="47" fg:w="5"/><text x="34.8088%" y="559.50">&lt;fut..</text></g><g><title>&lt;tower_http::cors::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="533" width="3.6765%" height="15" fill="rgb(235,36,10)" fg:x="47" fg:w="5"/><text x="34.8088%" y="543.50">&lt;tow..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="517" width="3.6765%" height="15" fill="rgb(251,123,47)" fg:x="47" fg:w="5"/><text x="34.8088%" y="527.50">&lt;axu..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="501" width="3.6765%" height="15" fill="rgb(221,13,13)" fg:x="47" fg:w="5"/><text x="34.8088%" y="511.50">&lt;tow..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="485" width="3.6765%" height="15" fill="rgb(238,131,9)" fg:x="47" fg:w="5"/><text x="34.8088%" y="495.50">&lt;tow..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="469" width="3.6765%" height="15" fill="rgb(211,50,8)" fg:x="47" fg:w="5"/><text x="34.8088%" y="479.50">&lt;fut..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="453" width="3.6765%" height="15" fill="rgb(245,182,24)" fg:x="47" fg:w="5"/><text x="34.8088%" y="463.50">&lt;fut..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="437" width="3.6765%" height="15" fill="rgb(242,14,37)" fg:x="47" fg:w="5"/><text x="34.8088%" y="447.50">&lt;fut..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="421" width="3.6765%" height="15" fill="rgb(246,228,12)" fg:x="47" fg:w="5"/><text x="34.8088%" y="431.50">&lt;axu..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="405" width="3.6765%" height="15" fill="rgb(213,55,15)" fg:x="47" fg:w="5"/><text x="34.8088%" y="415.50">&lt;tow..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="389" width="3.6765%" height="15" fill="rgb(209,9,3)" fg:x="47" fg:w="5"/><text x="34.8088%" y="399.50">&lt;tow..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="373" width="3.6765%" height="15" fill="rgb(230,59,30)" fg:x="47" fg:w="5"/><text x="34.8088%" y="383.50">&lt;fut..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="357" width="3.6765%" height="15" fill="rgb(209,121,21)" fg:x="47" fg:w="5"/><text x="34.8088%" y="367.50">&lt;fut..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="341" width="3.6765%" height="15" fill="rgb(220,109,13)" fg:x="47" fg:w="5"/><text x="34.8088%" y="351.50">&lt;fut..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="325" width="3.6765%" height="15" fill="rgb(232,18,1)" fg:x="47" fg:w="5"/><text x="34.8088%" y="335.50">&lt;axu..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="309" width="3.6765%" height="15" fill="rgb(215,41,42)" fg:x="47" fg:w="5"/><text x="34.8088%" y="319.50">&lt;tow..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="293" width="3.6765%" height="15" fill="rgb(224,123,36)" fg:x="47" fg:w="5"/><text x="34.8088%" y="303.50">&lt;tow..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="277" width="3.6765%" height="15" fill="rgb(240,125,3)" fg:x="47" fg:w="5"/><text x="34.8088%" y="287.50">&lt;fut..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 3.68%)</title><rect x="34.5588%" y="261" width="3.6765%" height="15" fill="rgb(205,98,50)" fg:x="47" fg:w="5"/><text x="34.8088%" y="271.50">&lt;fut..</text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1,T2),S,B&gt;&gt;::call::{{closure}} (5 samples, 3.68%)</title><rect x="34.5588%" y="245" width="3.6765%" height="15" fill="rgb(205,185,37)" fg:x="47" fg:w="5"/><text x="34.8088%" y="255.50">&lt;F a..</text></g><g><title>aggregate_api::paths::quote::handle_quote_request::{{closure}} (5 samples, 3.68%)</title><rect x="34.5588%" y="229" width="3.6765%" height="15" fill="rgb(238,207,15)" fg:x="47" fg:w="5"/><text x="34.8088%" y="239.50">aggr..</text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.74%)</title><rect x="37.5000%" y="213" width="0.7353%" height="15" fill="rgb(213,199,42)" fg:x="51" fg:w="1"/><text x="37.7500%" y="223.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.74%)</title><rect x="37.5000%" y="197" width="0.7353%" height="15" fill="rgb(235,201,11)" fg:x="51" fg:w="1"/><text x="37.7500%" y="207.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.74%)</title><rect x="37.5000%" y="181" width="0.7353%" height="15" fill="rgb(207,46,11)" fg:x="51" fg:w="1"/><text x="37.7500%" y="191.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.74%)</title><rect x="37.5000%" y="165" width="0.7353%" height="15" fill="rgb(241,35,35)" fg:x="51" fg:w="1"/><text x="37.7500%" y="175.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.74%)</title><rect x="37.5000%" y="149" width="0.7353%" height="15" fill="rgb(243,32,47)" fg:x="51" fg:w="1"/><text x="37.7500%" y="159.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::hash_usize (1 samples, 0.74%)</title><rect x="37.5000%" y="133" width="0.7353%" height="15" fill="rgb(247,202,23)" fg:x="51" fg:w="1"/><text x="37.7500%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.74%)</title><rect x="37.5000%" y="117" width="0.7353%" height="15" fill="rgb(219,102,11)" fg:x="51" fg:w="1"/><text x="37.7500%" y="127.50"></text></g><g><title>aggregate_api::main::{{closure}}::{{closure}} (1 samples, 0.74%)</title><rect x="38.2353%" y="661" width="0.7353%" height="15" fill="rgb(243,110,44)" fg:x="52" fg:w="1"/><text x="38.4853%" y="671.50"></text></g><g><title>aggregate_api::load_resources::load_json (1 samples, 0.74%)</title><rect x="38.2353%" y="645" width="0.7353%" height="15" fill="rgb(222,74,54)" fg:x="52" fg:w="1"/><text x="38.4853%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.74%)</title><rect x="38.2353%" y="629" width="0.7353%" height="15" fill="rgb(216,99,12)" fg:x="52" fg:w="1"/><text x="38.4853%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="38.2353%" y="613" width="0.7353%" height="15" fill="rgb(226,22,26)" fg:x="52" fg:w="1"/><text x="38.4853%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="38.2353%" y="597" width="0.7353%" height="15" fill="rgb(217,163,10)" fg:x="52" fg:w="1"/><text x="38.4853%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="38.2353%" y="581" width="0.7353%" height="15" fill="rgb(213,25,53)" fg:x="52" fg:w="1"/><text x="38.4853%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="38.2353%" y="565" width="0.7353%" height="15" fill="rgb(252,105,26)" fg:x="52" fg:w="1"/><text x="38.4853%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="38.2353%" y="549" width="0.7353%" height="15" fill="rgb(220,39,43)" fg:x="52" fg:w="1"/><text x="38.4853%" y="559.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="39.7059%" y="597" width="1.4706%" height="15" fill="rgb(229,68,48)" fg:x="54" fg:w="2"/><text x="39.9559%" y="607.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (1 samples, 0.74%)</title><rect x="40.4412%" y="581" width="0.7353%" height="15" fill="rgb(252,8,32)" fg:x="55" fg:w="1"/><text x="40.6912%" y="591.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (1 samples, 0.74%)</title><rect x="40.4412%" y="565" width="0.7353%" height="15" fill="rgb(223,20,43)" fg:x="55" fg:w="1"/><text x="40.6912%" y="575.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.74%)</title><rect x="41.9118%" y="373" width="0.7353%" height="15" fill="rgb(229,81,49)" fg:x="57" fg:w="1"/><text x="42.1618%" y="383.50"></text></g><g><title>&lt;hyper::client::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.74%)</title><rect x="41.9118%" y="357" width="0.7353%" height="15" fill="rgb(236,28,36)" fg:x="57" fg:w="1"/><text x="42.1618%" y="367.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="41.9118%" y="501" width="1.4706%" height="15" fill="rgb(249,185,26)" fg:x="57" fg:w="2"/><text x="42.1618%" y="511.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="41.9118%" y="485" width="1.4706%" height="15" fill="rgb(249,174,33)" fg:x="57" fg:w="2"/><text x="42.1618%" y="495.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="41.9118%" y="469" width="1.4706%" height="15" fill="rgb(233,201,37)" fg:x="57" fg:w="2"/><text x="42.1618%" y="479.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="41.9118%" y="453" width="1.4706%" height="15" fill="rgb(221,78,26)" fg:x="57" fg:w="2"/><text x="42.1618%" y="463.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="41.9118%" y="437" width="1.4706%" height="15" fill="rgb(250,127,30)" fg:x="57" fg:w="2"/><text x="42.1618%" y="447.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="41.9118%" y="421" width="1.4706%" height="15" fill="rgb(230,49,44)" fg:x="57" fg:w="2"/><text x="42.1618%" y="431.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (2 samples, 1.47%)</title><rect x="41.9118%" y="405" width="1.4706%" height="15" fill="rgb(229,67,23)" fg:x="57" fg:w="2"/><text x="42.1618%" y="415.50"></text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (2 samples, 1.47%)</title><rect x="41.9118%" y="389" width="1.4706%" height="15" fill="rgb(249,83,47)" fg:x="57" fg:w="2"/><text x="42.1618%" y="399.50"></text></g><g><title>&lt;tokio_native_tls::StartedHandshakeFuture&lt;F,S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="42.6471%" y="373" width="0.7353%" height="15" fill="rgb(215,43,3)" fg:x="58" fg:w="1"/><text x="42.8971%" y="383.50"></text></g><g><title>native_tls::imp::TlsConnector::connect (1 samples, 0.74%)</title><rect x="42.6471%" y="357" width="0.7353%" height="15" fill="rgb(238,154,13)" fg:x="58" fg:w="1"/><text x="42.8971%" y="367.50"></text></g><g><title>openssl::ssl::Ssl::connect (1 samples, 0.74%)</title><rect x="42.6471%" y="341" width="0.7353%" height="15" fill="rgb(219,56,2)" fg:x="58" fg:w="1"/><text x="42.8971%" y="351.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (3 samples, 2.21%)</title><rect x="41.9118%" y="565" width="2.2059%" height="15" fill="rgb(233,0,4)" fg:x="57" fg:w="3"/><text x="42.1618%" y="575.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (3 samples, 2.21%)</title><rect x="41.9118%" y="549" width="2.2059%" height="15" fill="rgb(235,30,7)" fg:x="57" fg:w="3"/><text x="42.1618%" y="559.50">&lt;..</text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (3 samples, 2.21%)</title><rect x="41.9118%" y="533" width="2.2059%" height="15" fill="rgb(250,79,13)" fg:x="57" fg:w="3"/><text x="42.1618%" y="543.50">&lt;..</text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (3 samples, 2.21%)</title><rect x="41.9118%" y="517" width="2.2059%" height="15" fill="rgb(211,146,34)" fg:x="57" fg:w="3"/><text x="42.1618%" y="527.50">h..</text></g><g><title>http::header::map::Entry&lt;T&gt;::or_insert_with (1 samples, 0.74%)</title><rect x="43.3824%" y="501" width="0.7353%" height="15" fill="rgb(228,22,38)" fg:x="59" fg:w="1"/><text x="43.6324%" y="511.50"></text></g><g><title>aggregate_api::dapps::across::get_swap_quote::{{closure}} (5 samples, 3.68%)</title><rect x="41.1765%" y="597" width="3.6765%" height="15" fill="rgb(235,168,5)" fg:x="56" fg:w="5"/><text x="41.4265%" y="607.50">aggr..</text></g><g><title>aggregate_api::dapps::across::fetch_data_and_calculate::{{closure}} (5 samples, 3.68%)</title><rect x="41.1765%" y="581" width="3.6765%" height="15" fill="rgb(221,155,16)" fg:x="56" fg:w="5"/><text x="41.4265%" y="591.50">aggr..</text></g><g><title>url::ParseOptions::parse (1 samples, 0.74%)</title><rect x="44.1176%" y="565" width="0.7353%" height="15" fill="rgb(215,215,53)" fg:x="60" fg:w="1"/><text x="44.3676%" y="575.50"></text></g><g><title>url::parser::Parser::parse_url (1 samples, 0.74%)</title><rect x="44.1176%" y="549" width="0.7353%" height="15" fill="rgb(223,4,10)" fg:x="60" fg:w="1"/><text x="44.3676%" y="559.50"></text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 0.74%)</title><rect x="44.1176%" y="533" width="0.7353%" height="15" fill="rgb(234,103,6)" fg:x="60" fg:w="1"/><text x="44.3676%" y="543.50"></text></g><g><title>url::parser::Parser::parse_path_start (1 samples, 0.74%)</title><rect x="44.1176%" y="517" width="0.7353%" height="15" fill="rgb(227,97,0)" fg:x="60" fg:w="1"/><text x="44.3676%" y="527.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="44.8529%" y="581" width="1.4706%" height="15" fill="rgb(234,150,53)" fg:x="61" fg:w="2"/><text x="45.1029%" y="591.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="44.8529%" y="565" width="1.4706%" height="15" fill="rgb(228,201,54)" fg:x="61" fg:w="2"/><text x="45.1029%" y="575.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="44.8529%" y="549" width="1.4706%" height="15" fill="rgb(222,22,37)" fg:x="61" fg:w="2"/><text x="45.1029%" y="559.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (2 samples, 1.47%)</title><rect x="44.8529%" y="533" width="1.4706%" height="15" fill="rgb(237,53,32)" fg:x="61" fg:w="2"/><text x="45.1029%" y="543.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::query (1 samples, 0.74%)</title><rect x="46.3235%" y="581" width="0.7353%" height="15" fill="rgb(233,25,53)" fg:x="63" fg:w="1"/><text x="46.5735%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for (T0,T1)&gt;::serialize (1 samples, 0.74%)</title><rect x="46.3235%" y="565" width="0.7353%" height="15" fill="rgb(210,40,34)" fg:x="63" fg:w="1"/><text x="46.5735%" y="575.50"></text></g><g><title>form_urlencoded::append_pair (1 samples, 0.74%)</title><rect x="46.3235%" y="549" width="0.7353%" height="15" fill="rgb(241,220,44)" fg:x="63" fg:w="1"/><text x="46.5735%" y="559.50"></text></g><g><title>form_urlencoded::append_encoded (1 samples, 0.74%)</title><rect x="46.3235%" y="533" width="0.7353%" height="15" fill="rgb(235,28,35)" fg:x="63" fg:w="1"/><text x="46.5735%" y="543.50"></text></g><g><title>reqwest::async_impl::response::Response::bytes::{{closure}} (1 samples, 0.74%)</title><rect x="47.0588%" y="565" width="0.7353%" height="15" fill="rgb(210,56,17)" fg:x="64" fg:w="1"/><text x="47.3088%" y="575.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (1 samples, 0.74%)</title><rect x="47.0588%" y="549" width="0.7353%" height="15" fill="rgb(224,130,29)" fg:x="64" fg:w="1"/><text x="47.3088%" y="559.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="47.0588%" y="533" width="0.7353%" height="15" fill="rgb(235,212,8)" fg:x="64" fg:w="1"/><text x="47.3088%" y="543.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="47.0588%" y="517" width="0.7353%" height="15" fill="rgb(223,33,50)" fg:x="64" fg:w="1"/><text x="47.3088%" y="527.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="47.0588%" y="501" width="0.7353%" height="15" fill="rgb(219,149,13)" fg:x="64" fg:w="1"/><text x="47.3088%" y="511.50"></text></g><g><title>hyper::body::body::Body::poll_inner (1 samples, 0.74%)</title><rect x="47.0588%" y="485" width="0.7353%" height="15" fill="rgb(250,156,29)" fg:x="64" fg:w="1"/><text x="47.3088%" y="495.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.74%)</title><rect x="47.0588%" y="469" width="0.7353%" height="15" fill="rgb(216,193,19)" fg:x="64" fg:w="1"/><text x="47.3088%" y="479.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (1 samples, 0.74%)</title><rect x="47.0588%" y="453" width="0.7353%" height="15" fill="rgb(216,135,14)" fg:x="64" fg:w="1"/><text x="47.3088%" y="463.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.74%)</title><rect x="47.0588%" y="437" width="0.7353%" height="15" fill="rgb(241,47,5)" fg:x="64" fg:w="1"/><text x="47.3088%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.74%)</title><rect x="47.0588%" y="421" width="0.7353%" height="15" fill="rgb(233,42,35)" fg:x="64" fg:w="1"/><text x="47.3088%" y="431.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.74%)</title><rect x="47.0588%" y="405" width="0.7353%" height="15" fill="rgb(231,13,6)" fg:x="64" fg:w="1"/><text x="47.3088%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.74%)</title><rect x="47.0588%" y="389" width="0.7353%" height="15" fill="rgb(207,181,40)" fg:x="64" fg:w="1"/><text x="47.3088%" y="399.50"></text></g><g><title>aggregate_api::dapps::bungee::get_swap_quote::{{closure}} (5 samples, 3.68%)</title><rect x="44.8529%" y="597" width="3.6765%" height="15" fill="rgb(254,173,49)" fg:x="61" fg:w="5"/><text x="45.1029%" y="607.50">aggr..</text></g><g><title>reqwest::async_impl::response::Response::json::{{closure}} (2 samples, 1.47%)</title><rect x="47.0588%" y="581" width="1.4706%" height="15" fill="rgb(221,1,38)" fg:x="64" fg:w="2"/><text x="47.3088%" y="591.50"></text></g><g><title>serde_json::de::from_slice (1 samples, 0.74%)</title><rect x="47.7941%" y="565" width="0.7353%" height="15" fill="rgb(206,124,46)" fg:x="65" fg:w="1"/><text x="48.0441%" y="575.50"></text></g><g><title>serde_json::de::from_str (1 samples, 0.74%)</title><rect x="47.7941%" y="549" width="0.7353%" height="15" fill="rgb(249,21,11)" fg:x="65" fg:w="1"/><text x="48.0441%" y="559.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="581" width="0.7353%" height="15" fill="rgb(222,201,40)" fg:x="67" fg:w="1"/><text x="49.5147%" y="591.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="565" width="0.7353%" height="15" fill="rgb(235,61,29)" fg:x="67" fg:w="1"/><text x="49.5147%" y="575.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="549" width="0.7353%" height="15" fill="rgb(219,207,3)" fg:x="67" fg:w="1"/><text x="49.5147%" y="559.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 0.74%)</title><rect x="49.2647%" y="533" width="0.7353%" height="15" fill="rgb(222,56,46)" fg:x="67" fg:w="1"/><text x="49.5147%" y="543.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="517" width="0.7353%" height="15" fill="rgb(239,76,54)" fg:x="67" fg:w="1"/><text x="49.5147%" y="527.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="501" width="0.7353%" height="15" fill="rgb(231,124,27)" fg:x="67" fg:w="1"/><text x="49.5147%" y="511.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="485" width="0.7353%" height="15" fill="rgb(249,195,6)" fg:x="67" fg:w="1"/><text x="49.5147%" y="495.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="469" width="0.7353%" height="15" fill="rgb(237,174,47)" fg:x="67" fg:w="1"/><text x="49.5147%" y="479.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="453" width="0.7353%" height="15" fill="rgb(206,201,31)" fg:x="67" fg:w="1"/><text x="49.5147%" y="463.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="437" width="0.7353%" height="15" fill="rgb(231,57,52)" fg:x="67" fg:w="1"/><text x="49.5147%" y="447.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.74%)</title><rect x="49.2647%" y="421" width="0.7353%" height="15" fill="rgb(248,177,22)" fg:x="67" fg:w="1"/><text x="49.5147%" y="431.50"></text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (1 samples, 0.74%)</title><rect x="49.2647%" y="405" width="0.7353%" height="15" fill="rgb(215,211,37)" fg:x="67" fg:w="1"/><text x="49.5147%" y="415.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="49.2647%" y="389" width="0.7353%" height="15" fill="rgb(241,128,51)" fg:x="67" fg:w="1"/><text x="49.5147%" y="399.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.74%)</title><rect x="49.2647%" y="373" width="0.7353%" height="15" fill="rgb(227,165,31)" fg:x="67" fg:w="1"/><text x="49.5147%" y="383.50"></text></g><g><title>BIO_read (1 samples, 0.74%)</title><rect x="49.2647%" y="357" width="0.7353%" height="15" fill="rgb(228,167,24)" fg:x="67" fg:w="1"/><text x="49.5147%" y="367.50"></text></g><g><title>openssl::ssl::bio::bread (1 samples, 0.74%)</title><rect x="49.2647%" y="341" width="0.7353%" height="15" fill="rgb(228,143,12)" fg:x="67" fg:w="1"/><text x="49.5147%" y="351.50"></text></g><g><title>&lt;tokio_native_tls::AllowStd&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.74%)</title><rect x="49.2647%" y="325" width="0.7353%" height="15" fill="rgb(249,149,8)" fg:x="67" fg:w="1"/><text x="49.5147%" y="335.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.74%)</title><rect x="49.2647%" y="309" width="0.7353%" height="15" fill="rgb(243,35,44)" fg:x="67" fg:w="1"/><text x="49.5147%" y="319.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.74%)</title><rect x="49.2647%" y="293" width="0.7353%" height="15" fill="rgb(246,89,9)" fg:x="67" fg:w="1"/><text x="49.5147%" y="303.50"></text></g><g><title>aggregate_api::dapps::debridge::get_swap_quote::{{closure}} (3 samples, 2.21%)</title><rect x="48.5294%" y="597" width="2.2059%" height="15" fill="rgb(233,213,13)" fg:x="66" fg:w="3"/><text x="48.7794%" y="607.50">a..</text></g><g><title>aggregate_api::utils::format_swap_details::format_swap_details::{{closure}} (1 samples, 0.74%)</title><rect x="50.0000%" y="581" width="0.7353%" height="15" fill="rgb(233,141,41)" fg:x="68" fg:w="1"/><text x="50.2500%" y="591.50"></text></g><g><title>aggregate_api::dapps::hyphen::get_swap_quote::{{closure}} (1 samples, 0.74%)</title><rect x="50.7353%" y="597" width="0.7353%" height="15" fill="rgb(239,167,4)" fg:x="69" fg:w="1"/><text x="50.9853%" y="607.50"></text></g><g><title>aggregate_api::utils::format_swap_details::format_swap_details::{{closure}} (1 samples, 0.74%)</title><rect x="50.7353%" y="581" width="0.7353%" height="15" fill="rgb(209,217,16)" fg:x="69" fg:w="1"/><text x="50.9853%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.74%)</title><rect x="50.7353%" y="565" width="0.7353%" height="15" fill="rgb(219,88,35)" fg:x="69" fg:w="1"/><text x="50.9853%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.74%)</title><rect x="50.7353%" y="549" width="0.7353%" height="15" fill="rgb(220,193,23)" fg:x="69" fg:w="1"/><text x="50.9853%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.74%)</title><rect x="50.7353%" y="533" width="0.7353%" height="15" fill="rgb(230,90,52)" fg:x="69" fg:w="1"/><text x="50.9853%" y="543.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.74%)</title><rect x="50.7353%" y="517" width="0.7353%" height="15" fill="rgb(252,106,19)" fg:x="69" fg:w="1"/><text x="50.9853%" y="527.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact_opt (1 samples, 0.74%)</title><rect x="50.7353%" y="501" width="0.7353%" height="15" fill="rgb(206,74,20)" fg:x="69" fg:w="1"/><text x="50.9853%" y="511.50"></text></g><g><title>&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="51.4706%" y="517" width="0.7353%" height="15" fill="rgb(230,138,44)" fg:x="70" fg:w="1"/><text x="51.7206%" y="527.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="51.4706%" y="501" width="0.7353%" height="15" fill="rgb(235,182,43)" fg:x="70" fg:w="1"/><text x="51.7206%" y="511.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="51.4706%" y="485" width="0.7353%" height="15" fill="rgb(242,16,51)" fg:x="70" fg:w="1"/><text x="51.7206%" y="495.50"></text></g><g><title>tokio::sync::oneshot::State::load (1 samples, 0.74%)</title><rect x="51.4706%" y="469" width="0.7353%" height="15" fill="rgb(248,9,4)" fg:x="70" fg:w="1"/><text x="51.7206%" y="479.50"></text></g><g><title>aggregate_api::dapps::jumper::get_swap_quote::{{closure}} (2 samples, 1.47%)</title><rect x="51.4706%" y="597" width="1.4706%" height="15" fill="rgb(210,31,22)" fg:x="70" fg:w="2"/><text x="51.7206%" y="607.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="51.4706%" y="581" width="1.4706%" height="15" fill="rgb(239,54,39)" fg:x="70" fg:w="2"/><text x="51.7206%" y="591.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="51.4706%" y="565" width="1.4706%" height="15" fill="rgb(230,99,41)" fg:x="70" fg:w="2"/><text x="51.7206%" y="575.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="51.4706%" y="549" width="1.4706%" height="15" fill="rgb(253,106,12)" fg:x="70" fg:w="2"/><text x="51.7206%" y="559.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (2 samples, 1.47%)</title><rect x="51.4706%" y="533" width="1.4706%" height="15" fill="rgb(213,46,41)" fg:x="70" fg:w="2"/><text x="51.7206%" y="543.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="52.2059%" y="517" width="0.7353%" height="15" fill="rgb(215,133,35)" fg:x="71" fg:w="1"/><text x="52.4559%" y="527.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="52.2059%" y="501" width="0.7353%" height="15" fill="rgb(213,28,5)" fg:x="71" fg:w="1"/><text x="52.4559%" y="511.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="52.2059%" y="485" width="0.7353%" height="15" fill="rgb(215,77,49)" fg:x="71" fg:w="1"/><text x="52.4559%" y="495.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="52.2059%" y="469" width="0.7353%" height="15" fill="rgb(248,100,22)" fg:x="71" fg:w="1"/><text x="52.4559%" y="479.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="52.2059%" y="453" width="0.7353%" height="15" fill="rgb(208,67,9)" fg:x="71" fg:w="1"/><text x="52.4559%" y="463.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="52.2059%" y="437" width="0.7353%" height="15" fill="rgb(219,133,21)" fg:x="71" fg:w="1"/><text x="52.4559%" y="447.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.74%)</title><rect x="52.2059%" y="421" width="0.7353%" height="15" fill="rgb(246,46,29)" fg:x="71" fg:w="1"/><text x="52.4559%" y="431.50"></text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (1 samples, 0.74%)</title><rect x="52.2059%" y="405" width="0.7353%" height="15" fill="rgb(246,185,52)" fg:x="71" fg:w="1"/><text x="52.4559%" y="415.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="53.6765%" y="389" width="0.7353%" height="15" fill="rgb(252,136,11)" fg:x="73" fg:w="1"/><text x="53.9265%" y="399.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.74%)</title><rect x="53.6765%" y="373" width="0.7353%" height="15" fill="rgb(219,138,53)" fg:x="73" fg:w="1"/><text x="53.9265%" y="383.50"></text></g><g><title>aggregate_api::dapps::layerswap::get_swap_quote::{{closure}} (3 samples, 2.21%)</title><rect x="52.9412%" y="597" width="2.2059%" height="15" fill="rgb(211,51,23)" fg:x="72" fg:w="3"/><text x="53.1912%" y="607.50">a..</text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="581" width="1.4706%" height="15" fill="rgb(247,221,28)" fg:x="73" fg:w="2"/><text x="53.9265%" y="591.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="565" width="1.4706%" height="15" fill="rgb(251,222,45)" fg:x="73" fg:w="2"/><text x="53.9265%" y="575.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="549" width="1.4706%" height="15" fill="rgb(217,162,53)" fg:x="73" fg:w="2"/><text x="53.9265%" y="559.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (2 samples, 1.47%)</title><rect x="53.6765%" y="533" width="1.4706%" height="15" fill="rgb(229,93,14)" fg:x="73" fg:w="2"/><text x="53.9265%" y="543.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="517" width="1.4706%" height="15" fill="rgb(209,67,49)" fg:x="73" fg:w="2"/><text x="53.9265%" y="527.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="501" width="1.4706%" height="15" fill="rgb(213,87,29)" fg:x="73" fg:w="2"/><text x="53.9265%" y="511.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="485" width="1.4706%" height="15" fill="rgb(205,151,52)" fg:x="73" fg:w="2"/><text x="53.9265%" y="495.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="469" width="1.4706%" height="15" fill="rgb(253,215,39)" fg:x="73" fg:w="2"/><text x="53.9265%" y="479.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="453" width="1.4706%" height="15" fill="rgb(221,220,41)" fg:x="73" fg:w="2"/><text x="53.9265%" y="463.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="53.6765%" y="437" width="1.4706%" height="15" fill="rgb(218,133,21)" fg:x="73" fg:w="2"/><text x="53.9265%" y="447.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (2 samples, 1.47%)</title><rect x="53.6765%" y="421" width="1.4706%" height="15" fill="rgb(221,193,43)" fg:x="73" fg:w="2"/><text x="53.9265%" y="431.50"></text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (2 samples, 1.47%)</title><rect x="53.6765%" y="405" width="1.4706%" height="15" fill="rgb(240,128,52)" fg:x="73" fg:w="2"/><text x="53.9265%" y="415.50"></text></g><g><title>&lt;tokio_native_tls::StartedHandshakeFuture&lt;F,S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="54.4118%" y="389" width="0.7353%" height="15" fill="rgb(253,114,12)" fg:x="74" fg:w="1"/><text x="54.6618%" y="399.50"></text></g><g><title>native_tls::imp::TlsConnector::connect (1 samples, 0.74%)</title><rect x="54.4118%" y="373" width="0.7353%" height="15" fill="rgb(215,223,47)" fg:x="74" fg:w="1"/><text x="54.6618%" y="383.50"></text></g><g><title>openssl::ssl::Ssl::connect (1 samples, 0.74%)</title><rect x="54.4118%" y="357" width="0.7353%" height="15" fill="rgb(248,225,23)" fg:x="74" fg:w="1"/><text x="54.6618%" y="367.50"></text></g><g><title>aggregate_api::dapps::minibridge::get_swap_quote::{{closure}} (2 samples, 1.47%)</title><rect x="55.1471%" y="597" width="1.4706%" height="15" fill="rgb(250,108,0)" fg:x="75" fg:w="2"/><text x="55.3971%" y="607.50"></text></g><g><title>serde_json::de::from_slice (2 samples, 1.47%)</title><rect x="55.1471%" y="581" width="1.4706%" height="15" fill="rgb(228,208,7)" fg:x="75" fg:w="2"/><text x="55.3971%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 1.47%)</title><rect x="55.1471%" y="565" width="1.4706%" height="15" fill="rgb(244,45,10)" fg:x="75" fg:w="2"/><text x="55.3971%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (2 samples, 1.47%)</title><rect x="55.1471%" y="549" width="1.4706%" height="15" fill="rgb(207,125,25)" fg:x="75" fg:w="2"/><text x="55.3971%" y="559.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 1.47%)</title><rect x="55.1471%" y="533" width="1.4706%" height="15" fill="rgb(210,195,18)" fg:x="75" fg:w="2"/><text x="55.3971%" y="543.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 1.47%)</title><rect x="55.1471%" y="517" width="1.4706%" height="15" fill="rgb(249,80,12)" fg:x="75" fg:w="2"/><text x="55.3971%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 1.47%)</title><rect x="55.1471%" y="501" width="1.4706%" height="15" fill="rgb(221,65,9)" fg:x="75" fg:w="2"/><text x="55.3971%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.74%)</title><rect x="55.8824%" y="485" width="0.7353%" height="15" fill="rgb(235,49,36)" fg:x="76" fg:w="1"/><text x="56.1324%" y="495.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (1 samples, 0.74%)</title><rect x="57.3529%" y="469" width="0.7353%" height="15" fill="rgb(225,32,20)" fg:x="78" fg:w="1"/><text x="57.6029%" y="479.50"></text></g><g><title>aggregate_api::dapps::nitro::get_swap_quote::{{closure}} (3 samples, 2.21%)</title><rect x="56.6176%" y="597" width="2.2059%" height="15" fill="rgb(215,141,46)" fg:x="77" fg:w="3"/><text x="56.8676%" y="607.50">a..</text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="57.3529%" y="581" width="1.4706%" height="15" fill="rgb(250,160,47)" fg:x="78" fg:w="2"/><text x="57.6029%" y="591.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="57.3529%" y="565" width="1.4706%" height="15" fill="rgb(216,222,40)" fg:x="78" fg:w="2"/><text x="57.6029%" y="575.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="57.3529%" y="549" width="1.4706%" height="15" fill="rgb(234,217,39)" fg:x="78" fg:w="2"/><text x="57.6029%" y="559.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (2 samples, 1.47%)</title><rect x="57.3529%" y="533" width="1.4706%" height="15" fill="rgb(207,178,40)" fg:x="78" fg:w="2"/><text x="57.6029%" y="543.50"></text></g><g><title>&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="57.3529%" y="517" width="1.4706%" height="15" fill="rgb(221,136,13)" fg:x="78" fg:w="2"/><text x="57.6029%" y="527.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="57.3529%" y="501" width="1.4706%" height="15" fill="rgb(249,199,10)" fg:x="78" fg:w="2"/><text x="57.6029%" y="511.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="57.3529%" y="485" width="1.4706%" height="15" fill="rgb(249,222,13)" fg:x="78" fg:w="2"/><text x="57.6029%" y="495.50"></text></g><g><title>tokio::sync::oneshot::State::load (1 samples, 0.74%)</title><rect x="58.0882%" y="469" width="0.7353%" height="15" fill="rgb(244,185,38)" fg:x="79" fg:w="1"/><text x="58.3382%" y="479.50"></text></g><g><title>aggregate_api::dapps::okx::get_swap_quote::{{closure}} (2 samples, 1.47%)</title><rect x="58.8235%" y="597" width="1.4706%" height="15" fill="rgb(236,202,9)" fg:x="80" fg:w="2"/><text x="59.0735%" y="607.50"></text></g><g><title>reqwest::async_impl::response::Response::text::{{closure}} (1 samples, 0.74%)</title><rect x="59.5588%" y="581" width="0.7353%" height="15" fill="rgb(250,229,37)" fg:x="81" fg:w="1"/><text x="59.8088%" y="591.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (1 samples, 0.74%)</title><rect x="59.5588%" y="565" width="0.7353%" height="15" fill="rgb(206,174,23)" fg:x="81" fg:w="1"/><text x="59.8088%" y="575.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="59.5588%" y="549" width="0.7353%" height="15" fill="rgb(211,33,43)" fg:x="81" fg:w="1"/><text x="59.8088%" y="559.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="59.5588%" y="533" width="0.7353%" height="15" fill="rgb(245,58,50)" fg:x="81" fg:w="1"/><text x="59.8088%" y="543.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="59.5588%" y="517" width="0.7353%" height="15" fill="rgb(244,68,36)" fg:x="81" fg:w="1"/><text x="59.8088%" y="527.50"></text></g><g><title>hyper::body::body::Body::poll_inner (1 samples, 0.74%)</title><rect x="59.5588%" y="501" width="0.7353%" height="15" fill="rgb(232,229,15)" fg:x="81" fg:w="1"/><text x="59.8088%" y="511.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.74%)</title><rect x="59.5588%" y="485" width="0.7353%" height="15" fill="rgb(254,30,23)" fg:x="81" fg:w="1"/><text x="59.8088%" y="495.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (1 samples, 0.74%)</title><rect x="59.5588%" y="469" width="0.7353%" height="15" fill="rgb(235,160,14)" fg:x="81" fg:w="1"/><text x="59.8088%" y="479.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.74%)</title><rect x="59.5588%" y="453" width="0.7353%" height="15" fill="rgb(212,155,44)" fg:x="81" fg:w="1"/><text x="59.8088%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.74%)</title><rect x="59.5588%" y="437" width="0.7353%" height="15" fill="rgb(226,2,50)" fg:x="81" fg:w="1"/><text x="59.8088%" y="447.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.74%)</title><rect x="59.5588%" y="421" width="0.7353%" height="15" fill="rgb(234,177,6)" fg:x="81" fg:w="1"/><text x="59.8088%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.74%)</title><rect x="59.5588%" y="405" width="0.7353%" height="15" fill="rgb(217,24,9)" fg:x="81" fg:w="1"/><text x="59.8088%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 2.21%)</title><rect x="61.0294%" y="581" width="2.2059%" height="15" fill="rgb(220,13,46)" fg:x="83" fg:w="3"/><text x="61.2794%" y="591.50">&lt;..</text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (3 samples, 2.21%)</title><rect x="61.0294%" y="565" width="2.2059%" height="15" fill="rgb(239,221,27)" fg:x="83" fg:w="3"/><text x="61.2794%" y="575.50">&lt;..</text></g><g><title>&lt;[T] as alloc::slice::SpecCloneIntoVec&lt;T,A&gt;&gt;::clone_into (3 samples, 2.21%)</title><rect x="61.0294%" y="549" width="2.2059%" height="15" fill="rgb(222,198,25)" fg:x="83" fg:w="3"/><text x="61.2794%" y="559.50">&lt;..</text></g><g><title>&lt;indexmap::Bucket&lt;K,V&gt; as core::clone::Clone&gt;::clone (1 samples, 0.74%)</title><rect x="62.5000%" y="533" width="0.7353%" height="15" fill="rgb(211,99,13)" fg:x="85" fg:w="1"/><text x="62.7500%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.74%)</title><rect x="62.5000%" y="517" width="0.7353%" height="15" fill="rgb(232,111,31)" fg:x="85" fg:w="1"/><text x="62.7500%" y="527.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="63.2353%" y="581" width="0.7353%" height="15" fill="rgb(245,82,37)" fg:x="86" fg:w="1"/><text x="63.4853%" y="591.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="63.2353%" y="565" width="0.7353%" height="15" fill="rgb(227,149,46)" fg:x="86" fg:w="1"/><text x="63.4853%" y="575.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="63.2353%" y="549" width="0.7353%" height="15" fill="rgb(218,36,50)" fg:x="86" fg:w="1"/><text x="63.4853%" y="559.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 0.74%)</title><rect x="63.2353%" y="533" width="0.7353%" height="15" fill="rgb(226,80,48)" fg:x="86" fg:w="1"/><text x="63.4853%" y="543.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="63.2353%" y="517" width="0.7353%" height="15" fill="rgb(238,224,15)" fg:x="86" fg:w="1"/><text x="63.4853%" y="527.50"></text></g><g><title>aggregate_api::dapps::orbiter::find_valid_route (1 samples, 0.74%)</title><rect x="63.9706%" y="581" width="0.7353%" height="15" fill="rgb(241,136,10)" fg:x="87" fg:w="1"/><text x="64.2206%" y="591.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.74%)</title><rect x="63.9706%" y="565" width="0.7353%" height="15" fill="rgb(208,32,45)" fg:x="87" fg:w="1"/><text x="64.2206%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.74%)</title><rect x="63.9706%" y="549" width="0.7353%" height="15" fill="rgb(207,135,9)" fg:x="87" fg:w="1"/><text x="64.2206%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;aggregate_api::dapps::orbiter::Router&gt; (1 samples, 0.74%)</title><rect x="64.7059%" y="581" width="0.7353%" height="15" fill="rgb(206,86,44)" fg:x="88" fg:w="1"/><text x="64.9559%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.74%)</title><rect x="65.4412%" y="581" width="0.7353%" height="15" fill="rgb(245,177,15)" fg:x="89" fg:w="1"/><text x="65.6912%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.74%)</title><rect x="65.4412%" y="565" width="0.7353%" height="15" fill="rgb(206,64,50)" fg:x="89" fg:w="1"/><text x="65.6912%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.74%)</title><rect x="65.4412%" y="549" width="0.7353%" height="15" fill="rgb(234,36,40)" fg:x="89" fg:w="1"/><text x="65.6912%" y="559.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (1 samples, 0.74%)</title><rect x="67.6471%" y="565" width="0.7353%" height="15" fill="rgb(213,64,8)" fg:x="92" fg:w="1"/><text x="67.8971%" y="575.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="67.6471%" y="549" width="0.7353%" height="15" fill="rgb(210,75,36)" fg:x="92" fg:w="1"/><text x="67.8971%" y="559.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="67.6471%" y="533" width="0.7353%" height="15" fill="rgb(229,88,21)" fg:x="92" fg:w="1"/><text x="67.8971%" y="543.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1 samples, 0.74%)</title><rect x="67.6471%" y="517" width="0.7353%" height="15" fill="rgb(252,204,47)" fg:x="92" fg:w="1"/><text x="67.8971%" y="527.50"></text></g><g><title>hyper::body::body::Body::poll_inner (1 samples, 0.74%)</title><rect x="67.6471%" y="501" width="0.7353%" height="15" fill="rgb(208,77,27)" fg:x="92" fg:w="1"/><text x="67.8971%" y="511.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.74%)</title><rect x="67.6471%" y="485" width="0.7353%" height="15" fill="rgb(221,76,26)" fg:x="92" fg:w="1"/><text x="67.8971%" y="495.50"></text></g><g><title>reqwest::async_impl::response::Response::text::{{closure}} (4 samples, 2.94%)</title><rect x="66.1765%" y="581" width="2.9412%" height="15" fill="rgb(225,139,18)" fg:x="90" fg:w="4"/><text x="66.4265%" y="591.50">re..</text></g><g><title>encoding_rs::Encoding::decode_without_bom_handling (1 samples, 0.74%)</title><rect x="68.3824%" y="565" width="0.7353%" height="15" fill="rgb(230,137,11)" fg:x="93" fg:w="1"/><text x="68.6324%" y="575.50"></text></g><g><title>encoding_rs::utf_8::utf8_valid_up_to (1 samples, 0.74%)</title><rect x="68.3824%" y="549" width="0.7353%" height="15" fill="rgb(212,28,1)" fg:x="93" fg:w="1"/><text x="68.6324%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.74%)</title><rect x="69.8529%" y="469" width="0.7353%" height="15" fill="rgb(248,164,17)" fg:x="95" fg:w="1"/><text x="70.1029%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.74%)</title><rect x="69.8529%" y="453" width="0.7353%" height="15" fill="rgb(222,171,42)" fg:x="95" fg:w="1"/><text x="70.1029%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (2 samples, 1.47%)</title><rect x="70.5882%" y="469" width="1.4706%" height="15" fill="rgb(243,84,45)" fg:x="96" fg:w="2"/><text x="70.8382%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.74%)</title><rect x="71.3235%" y="453" width="0.7353%" height="15" fill="rgb(252,49,23)" fg:x="97" fg:w="1"/><text x="71.5735%" y="463.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 4.41%)</title><rect x="69.1176%" y="581" width="4.4118%" height="15" fill="rgb(215,19,7)" fg:x="94" fg:w="6"/><text x="69.3676%" y="591.50">serde..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 4.41%)</title><rect x="69.1176%" y="565" width="4.4118%" height="15" fill="rgb(238,81,41)" fg:x="94" fg:w="6"/><text x="69.3676%" y="575.50">serde..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 4.41%)</title><rect x="69.1176%" y="549" width="4.4118%" height="15" fill="rgb(210,199,37)" fg:x="94" fg:w="6"/><text x="69.3676%" y="559.50">&lt;serd..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 4.41%)</title><rect x="69.1176%" y="533" width="4.4118%" height="15" fill="rgb(244,192,49)" fg:x="94" fg:w="6"/><text x="69.3676%" y="543.50">serde..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 4.41%)</title><rect x="69.1176%" y="517" width="4.4118%" height="15" fill="rgb(226,211,11)" fg:x="94" fg:w="6"/><text x="69.3676%" y="527.50">&lt;serd..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 4.41%)</title><rect x="69.1176%" y="501" width="4.4118%" height="15" fill="rgb(236,162,54)" fg:x="94" fg:w="6"/><text x="69.3676%" y="511.50">serde..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 4.41%)</title><rect x="69.1176%" y="485" width="4.4118%" height="15" fill="rgb(220,229,9)" fg:x="94" fg:w="6"/><text x="69.3676%" y="495.50">&lt;serd..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 1.47%)</title><rect x="72.0588%" y="469" width="1.4706%" height="15" fill="rgb(250,87,22)" fg:x="98" fg:w="2"/><text x="72.3088%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.74%)</title><rect x="72.7941%" y="453" width="0.7353%" height="15" fill="rgb(239,43,17)" fg:x="99" fg:w="1"/><text x="73.0441%" y="463.50"></text></g><g><title>aggregate_api::dapps::orbiter::get_swap_quote::{{closure}} (21 samples, 15.44%)</title><rect x="60.2941%" y="597" width="15.4412%" height="15" fill="rgb(231,177,25)" fg:x="82" fg:w="21"/><text x="60.5441%" y="607.50">aggregate_api::dapps::or..</text></g><g><title>serde_json::value::from_value (3 samples, 2.21%)</title><rect x="73.5294%" y="581" width="2.2059%" height="15" fill="rgb(219,179,1)" fg:x="100" fg:w="3"/><text x="73.7794%" y="591.50">s..</text></g><g><title>serde_json::value::de::visit_array (3 samples, 2.21%)</title><rect x="73.5294%" y="565" width="2.2059%" height="15" fill="rgb(238,219,53)" fg:x="100" fg:w="3"/><text x="73.7794%" y="575.50">s..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 2.21%)</title><rect x="73.5294%" y="549" width="2.2059%" height="15" fill="rgb(232,167,36)" fg:x="100" fg:w="3"/><text x="73.7794%" y="559.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 2.21%)</title><rect x="73.5294%" y="533" width="2.2059%" height="15" fill="rgb(244,19,51)" fg:x="100" fg:w="3"/><text x="73.7794%" y="543.50">s..</text></g><g><title>serde_json::value::de::visit_object (3 samples, 2.21%)</title><rect x="73.5294%" y="517" width="2.2059%" height="15" fill="rgb(224,6,22)" fg:x="100" fg:w="3"/><text x="73.7794%" y="527.50">s..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 1.47%)</title><rect x="74.2647%" y="501" width="1.4706%" height="15" fill="rgb(224,145,5)" fg:x="101" fg:w="2"/><text x="74.5147%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.74%)</title><rect x="76.4706%" y="581" width="0.7353%" height="15" fill="rgb(234,130,49)" fg:x="104" fg:w="1"/><text x="76.7206%" y="591.50"></text></g><g><title>aggregate_api::utils::utils::get_random_proxy_client (2 samples, 1.47%)</title><rect x="77.2059%" y="581" width="1.4706%" height="15" fill="rgb(254,6,2)" fg:x="105" fg:w="2"/><text x="77.4559%" y="591.50"></text></g><g><title>rand::seq::IteratorRandom::choose (2 samples, 1.47%)</title><rect x="77.2059%" y="565" width="1.4706%" height="15" fill="rgb(208,96,46)" fg:x="105" fg:w="2"/><text x="77.4559%" y="575.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.47%)</title><rect x="77.2059%" y="549" width="1.4706%" height="15" fill="rgb(239,3,39)" fg:x="105" fg:w="2"/><text x="77.4559%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.74%)</title><rect x="77.9412%" y="533" width="0.7353%" height="15" fill="rgb(233,210,1)" fg:x="106" fg:w="1"/><text x="78.1912%" y="543.50"></text></g><g><title>aggregate_api::dapps::owlto::get_swap_quote::{{closure}} (5 samples, 3.68%)</title><rect x="75.7353%" y="597" width="3.6765%" height="15" fill="rgb(244,137,37)" fg:x="103" fg:w="5"/><text x="75.9853%" y="607.50">aggr..</text></g><g><title>serde_json::de::from_str (1 samples, 0.74%)</title><rect x="78.6765%" y="581" width="0.7353%" height="15" fill="rgb(240,136,2)" fg:x="107" fg:w="1"/><text x="78.9265%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.74%)</title><rect x="78.6765%" y="565" width="0.7353%" height="15" fill="rgb(239,18,37)" fg:x="107" fg:w="1"/><text x="78.9265%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.74%)</title><rect x="78.6765%" y="549" width="0.7353%" height="15" fill="rgb(218,185,22)" fg:x="107" fg:w="1"/><text x="78.9265%" y="559.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (1 samples, 0.74%)</title><rect x="78.6765%" y="533" width="0.7353%" height="15" fill="rgb(225,218,4)" fg:x="107" fg:w="1"/><text x="78.9265%" y="543.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (1 samples, 0.74%)</title><rect x="78.6765%" y="517" width="0.7353%" height="15" fill="rgb(230,182,32)" fg:x="107" fg:w="1"/><text x="78.9265%" y="527.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 1.47%)</title><rect x="79.4118%" y="565" width="1.4706%" height="15" fill="rgb(242,56,43)" fg:x="108" fg:w="2"/><text x="79.6618%" y="575.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.74%)</title><rect x="80.1471%" y="549" width="0.7353%" height="15" fill="rgb(233,99,24)" fg:x="109" fg:w="1"/><text x="80.3971%" y="559.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (3 samples, 2.21%)</title><rect x="80.8824%" y="565" width="2.2059%" height="15" fill="rgb(234,209,42)" fg:x="110" fg:w="3"/><text x="81.1324%" y="575.50">c..</text></g><g><title>core::fmt::write (1 samples, 0.74%)</title><rect x="82.3529%" y="549" width="0.7353%" height="15" fill="rgb(227,7,12)" fg:x="112" fg:w="1"/><text x="82.6029%" y="559.50"></text></g><g><title>aggregate_api::dapps::rango::find_token_data (6 samples, 4.41%)</title><rect x="79.4118%" y="581" width="4.4118%" height="15" fill="rgb(245,203,43)" fg:x="108" fg:w="6"/><text x="79.6618%" y="591.50">aggre..</text></g><g><title>std::sys::sync::once::futex::Once::call (1 samples, 0.74%)</title><rect x="83.0882%" y="565" width="0.7353%" height="15" fill="rgb(238,205,33)" fg:x="113" fg:w="1"/><text x="83.3382%" y="575.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.74%)</title><rect x="83.0882%" y="549" width="0.7353%" height="15" fill="rgb(231,56,7)" fg:x="113" fg:w="1"/><text x="83.3382%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="83.0882%" y="533" width="0.7353%" height="15" fill="rgb(244,186,29)" fg:x="113" fg:w="1"/><text x="83.3382%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="83.0882%" y="517" width="0.7353%" height="15" fill="rgb(234,111,31)" fg:x="113" fg:w="1"/><text x="83.3382%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="83.0882%" y="501" width="0.7353%" height="15" fill="rgb(241,149,10)" fg:x="113" fg:w="1"/><text x="83.3382%" y="511.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.74%)</title><rect x="83.0882%" y="485" width="0.7353%" height="15" fill="rgb(249,206,44)" fg:x="113" fg:w="1"/><text x="83.3382%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="83.0882%" y="469" width="0.7353%" height="15" fill="rgb(251,153,30)" fg:x="113" fg:w="1"/><text x="83.3382%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="83.0882%" y="453" width="0.7353%" height="15" fill="rgb(239,152,38)" fg:x="113" fg:w="1"/><text x="83.3382%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="83.0882%" y="437" width="0.7353%" height="15" fill="rgb(249,139,47)" fg:x="113" fg:w="1"/><text x="83.3382%" y="447.50"></text></g><g><title>aggregate_api::dapps::rango::get_swap_quote::{{closure}} (7 samples, 5.15%)</title><rect x="79.4118%" y="597" width="5.1471%" height="15" fill="rgb(244,64,35)" fg:x="108" fg:w="7"/><text x="79.6618%" y="607.50">aggreg..</text></g><g><title>aggregate_api::utils::format_swap_details::format_swap_details::{{closure}} (1 samples, 0.74%)</title><rect x="83.8235%" y="581" width="0.7353%" height="15" fill="rgb(216,46,15)" fg:x="114" fg:w="1"/><text x="84.0735%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (1 samples, 0.74%)</title><rect x="83.8235%" y="565" width="0.7353%" height="15" fill="rgb(250,74,19)" fg:x="114" fg:w="1"/><text x="84.0735%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.74%)</title><rect x="83.8235%" y="549" width="0.7353%" height="15" fill="rgb(249,42,33)" fg:x="114" fg:w="1"/><text x="84.0735%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.74%)</title><rect x="83.8235%" y="533" width="0.7353%" height="15" fill="rgb(242,149,17)" fg:x="114" fg:w="1"/><text x="84.0735%" y="543.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.74%)</title><rect x="83.8235%" y="517" width="0.7353%" height="15" fill="rgb(244,29,21)" fg:x="114" fg:w="1"/><text x="84.0735%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (1 samples, 0.74%)</title><rect x="83.8235%" y="501" width="0.7353%" height="15" fill="rgb(220,130,37)" fg:x="114" fg:w="1"/><text x="84.0735%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.74%)</title><rect x="83.8235%" y="485" width="0.7353%" height="15" fill="rgb(211,67,2)" fg:x="114" fg:w="1"/><text x="84.0735%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.74%)</title><rect x="83.8235%" y="469" width="0.7353%" height="15" fill="rgb(235,68,52)" fg:x="114" fg:w="1"/><text x="84.0735%" y="479.50"></text></g><g><title>aggregate_api::dapps::relay::get_swap_quote::{{closure}} (1 samples, 0.74%)</title><rect x="84.5588%" y="597" width="0.7353%" height="15" fill="rgb(246,142,3)" fg:x="115" fg:w="1"/><text x="84.8088%" y="607.50"></text></g><g><title>serde_json::de::from_str (1 samples, 0.74%)</title><rect x="84.5588%" y="581" width="0.7353%" height="15" fill="rgb(241,25,7)" fg:x="115" fg:w="1"/><text x="84.8088%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.74%)</title><rect x="84.5588%" y="565" width="0.7353%" height="15" fill="rgb(242,119,39)" fg:x="115" fg:w="1"/><text x="84.8088%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.74%)</title><rect x="84.5588%" y="549" width="0.7353%" height="15" fill="rgb(241,98,45)" fg:x="115" fg:w="1"/><text x="84.8088%" y="559.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.74%)</title><rect x="84.5588%" y="533" width="0.7353%" height="15" fill="rgb(254,28,30)" fg:x="115" fg:w="1"/><text x="84.8088%" y="543.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.74%)</title><rect x="84.5588%" y="517" width="0.7353%" height="15" fill="rgb(241,142,54)" fg:x="115" fg:w="1"/><text x="84.8088%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.74%)</title><rect x="84.5588%" y="501" width="0.7353%" height="15" fill="rgb(222,85,15)" fg:x="115" fg:w="1"/><text x="84.8088%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.74%)</title><rect x="84.5588%" y="485" width="0.7353%" height="15" fill="rgb(210,85,47)" fg:x="115" fg:w="1"/><text x="84.8088%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.74%)</title><rect x="84.5588%" y="469" width="0.7353%" height="15" fill="rgb(224,206,25)" fg:x="115" fg:w="1"/><text x="84.8088%" y="479.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.74%)</title><rect x="84.5588%" y="453" width="0.7353%" height="15" fill="rgb(243,201,19)" fg:x="115" fg:w="1"/><text x="84.8088%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.74%)</title><rect x="84.5588%" y="437" width="0.7353%" height="15" fill="rgb(236,59,4)" fg:x="115" fg:w="1"/><text x="84.8088%" y="447.50"></text></g><g><title>encoding_rs::Encoding::decode_without_bom_handling (1 samples, 0.74%)</title><rect x="85.2941%" y="565" width="0.7353%" height="15" fill="rgb(254,179,45)" fg:x="116" fg:w="1"/><text x="85.5441%" y="575.50"></text></g><g><title>encoding_rs::utf_8::utf8_valid_up_to (1 samples, 0.74%)</title><rect x="85.2941%" y="549" width="0.7353%" height="15" fill="rgb(226,14,10)" fg:x="116" fg:w="1"/><text x="85.5441%" y="559.50"></text></g><g><title>bytes::bytes_mut::shared_v_is_unique (1 samples, 0.74%)</title><rect x="86.0294%" y="549" width="0.7353%" height="15" fill="rgb(244,27,41)" fg:x="117" fg:w="1"/><text x="86.2794%" y="559.50"></text></g><g><title>aggregate_api::dapps::squidrouter::get_swap_quote::{{closure}} (3 samples, 2.21%)</title><rect x="85.2941%" y="597" width="2.2059%" height="15" fill="rgb(235,35,32)" fg:x="116" fg:w="3"/><text x="85.5441%" y="607.50">a..</text></g><g><title>reqwest::async_impl::response::Response::text::{{closure}} (3 samples, 2.21%)</title><rect x="85.2941%" y="581" width="2.2059%" height="15" fill="rgb(218,68,31)" fg:x="116" fg:w="3"/><text x="85.5441%" y="591.50">r..</text></g><g><title>reqwest::async_impl::response::Response::bytes::{{closure}} (2 samples, 1.47%)</title><rect x="86.0294%" y="565" width="1.4706%" height="15" fill="rgb(207,120,37)" fg:x="117" fg:w="2"/><text x="86.2794%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.74%)</title><rect x="86.7647%" y="549" width="0.7353%" height="15" fill="rgb(227,98,0)" fg:x="118" fg:w="1"/><text x="87.0147%" y="559.50"></text></g><g><title>aggregate_api::utils::format_swap_details::format_swap_details::{{closure}} (1 samples, 0.74%)</title><rect x="87.5000%" y="581" width="0.7353%" height="15" fill="rgb(207,7,3)" fg:x="119" fg:w="1"/><text x="87.7500%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.74%)</title><rect x="87.5000%" y="565" width="0.7353%" height="15" fill="rgb(206,98,19)" fg:x="119" fg:w="1"/><text x="87.7500%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.74%)</title><rect x="87.5000%" y="549" width="0.7353%" height="15" fill="rgb(217,5,26)" fg:x="119" fg:w="1"/><text x="87.7500%" y="559.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="88.9706%" y="517" width="1.4706%" height="15" fill="rgb(235,190,38)" fg:x="121" fg:w="2"/><text x="89.2206%" y="527.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="88.9706%" y="501" width="1.4706%" height="15" fill="rgb(247,86,24)" fg:x="121" fg:w="2"/><text x="89.2206%" y="511.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="88.9706%" y="485" width="1.4706%" height="15" fill="rgb(205,101,16)" fg:x="121" fg:w="2"/><text x="89.2206%" y="495.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 0.74%)</title><rect x="89.7059%" y="469" width="0.7353%" height="15" fill="rgb(246,168,33)" fg:x="122" fg:w="1"/><text x="89.9559%" y="479.50"></text></g><g><title>&lt;ethers_providers::rpc::provider::Provider&lt;P&gt; as ethers_providers::middleware::Middleware&gt;::call::{{closure}} (4 samples, 2.94%)</title><rect x="88.2353%" y="565" width="2.9412%" height="15" fill="rgb(231,114,1)" fg:x="120" fg:w="4"/><text x="88.4853%" y="575.50">&lt;e..</text></g><g><title>&lt;tracing_futures::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 2.21%)</title><rect x="88.9706%" y="549" width="2.2059%" height="15" fill="rgb(207,184,53)" fg:x="121" fg:w="3"/><text x="89.2206%" y="559.50">&lt;..</text></g><g><title>&lt;ethers_providers::rpc::transports::http::Provider as ethers_providers::rpc::connections::JsonRpcClient&gt;::request::{{closure}} (3 samples, 2.21%)</title><rect x="88.9706%" y="533" width="2.2059%" height="15" fill="rgb(224,95,51)" fg:x="121" fg:w="3"/><text x="89.2206%" y="543.50">&lt;..</text></g><g><title>serde_json::de::from_slice (1 samples, 0.74%)</title><rect x="90.4412%" y="517" width="0.7353%" height="15" fill="rgb(212,188,45)" fg:x="123" fg:w="1"/><text x="90.6912%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1 samples, 0.74%)</title><rect x="90.4412%" y="501" width="0.7353%" height="15" fill="rgb(223,154,38)" fg:x="123" fg:w="1"/><text x="90.6912%" y="511.50"></text></g><g><title>&lt;&lt;ethers_providers::rpc::transports::common::Response as serde::de::Deserialize&gt;::deserialize::ResponseVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="90.4412%" y="485" width="0.7353%" height="15" fill="rgb(251,22,52)" fg:x="123" fg:w="1"/><text x="90.6912%" y="495.50"></text></g><g><title>aggregate_api::utils::utils::call_json_rpc::{{closure}} (7 samples, 5.15%)</title><rect x="88.2353%" y="581" width="5.1471%" height="15" fill="rgb(229,209,22)" fg:x="120" fg:w="7"/><text x="88.4853%" y="591.50">aggreg..</text></g><g><title>aggregate_api::utils::utils::get_random_rpc_proxy_provider (3 samples, 2.21%)</title><rect x="91.1765%" y="565" width="2.2059%" height="15" fill="rgb(234,138,34)" fg:x="124" fg:w="3"/><text x="91.4265%" y="575.50">a..</text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.74%)</title><rect x="92.6471%" y="549" width="0.7353%" height="15" fill="rgb(212,95,11)" fg:x="126" fg:w="1"/><text x="92.8971%" y="559.50"></text></g><g><title>aggregate_api::dapps::stargate_v2_bus::inner_get_swap_quote::{{closure}} (9 samples, 6.62%)</title><rect x="87.5000%" y="597" width="6.6176%" height="15" fill="rgb(240,179,47)" fg:x="119" fg:w="9"/><text x="87.7500%" y="607.50">aggregate..</text></g><g><title>std::sys::sync::once::futex::Once::call (1 samples, 0.74%)</title><rect x="93.3824%" y="581" width="0.7353%" height="15" fill="rgb(240,163,11)" fg:x="127" fg:w="1"/><text x="93.6324%" y="591.50"></text></g><g><title>serde_json::de::from_reader (1 samples, 0.74%)</title><rect x="93.3824%" y="565" width="0.7353%" height="15" fill="rgb(236,37,12)" fg:x="127" fg:w="1"/><text x="93.6324%" y="575.50"></text></g><g><title>&lt;ethabi::contract::Contract as serde::de::Deserialize&gt;::deserialize (1 samples, 0.74%)</title><rect x="93.3824%" y="549" width="0.7353%" height="15" fill="rgb(232,164,16)" fg:x="127" fg:w="1"/><text x="93.6324%" y="559.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.74%)</title><rect x="93.3824%" y="533" width="0.7353%" height="15" fill="rgb(244,205,15)" fg:x="127" fg:w="1"/><text x="93.6324%" y="543.50"></text></g><g><title>ethabi::operation::_::&lt;impl serde::de::Deserialize for ethabi::operation::Operation&gt;::deserialize (1 samples, 0.74%)</title><rect x="93.3824%" y="517" width="0.7353%" height="15" fill="rgb(223,117,47)" fg:x="127" fg:w="1"/><text x="93.6324%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::TaggedContentVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="93.3824%" y="501" width="0.7353%" height="15" fill="rgb(244,107,35)" fg:x="127" fg:w="1"/><text x="93.6324%" y="511.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (1 samples, 0.74%)</title><rect x="93.3824%" y="485" width="0.7353%" height="15" fill="rgb(205,140,8)" fg:x="127" fg:w="1"/><text x="93.6324%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.74%)</title><rect x="93.3824%" y="469" width="0.7353%" height="15" fill="rgb(228,84,46)" fg:x="127" fg:w="1"/><text x="93.6324%" y="479.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.74%)</title><rect x="93.3824%" y="453" width="0.7353%" height="15" fill="rgb(254,188,9)" fg:x="127" fg:w="1"/><text x="93.6324%" y="463.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (1 samples, 0.74%)</title><rect x="93.3824%" y="437" width="0.7353%" height="15" fill="rgb(206,112,54)" fg:x="127" fg:w="1"/><text x="93.6324%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="93.3824%" y="421" width="0.7353%" height="15" fill="rgb(216,84,49)" fg:x="127" fg:w="1"/><text x="93.6324%" y="431.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (1 samples, 0.74%)</title><rect x="93.3824%" y="405" width="0.7353%" height="15" fill="rgb(214,194,35)" fg:x="127" fg:w="1"/><text x="93.6324%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.74%)</title><rect x="93.3824%" y="389" width="0.7353%" height="15" fill="rgb(249,28,3)" fg:x="127" fg:w="1"/><text x="93.6324%" y="399.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.74%)</title><rect x="93.3824%" y="373" width="0.7353%" height="15" fill="rgb(222,56,52)" fg:x="127" fg:w="1"/><text x="93.6324%" y="383.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (1 samples, 0.74%)</title><rect x="93.3824%" y="357" width="0.7353%" height="15" fill="rgb(245,217,50)" fg:x="127" fg:w="1"/><text x="93.6324%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="93.3824%" y="341" width="0.7353%" height="15" fill="rgb(213,201,24)" fg:x="127" fg:w="1"/><text x="93.6324%" y="351.50"></text></g><g><title>serde::de::Deserializer::__deserialize_content (1 samples, 0.74%)</title><rect x="93.3824%" y="325" width="0.7353%" height="15" fill="rgb(248,116,28)" fg:x="127" fg:w="1"/><text x="93.6324%" y="335.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.74%)</title><rect x="93.3824%" y="309" width="0.7353%" height="15" fill="rgb(219,72,43)" fg:x="127" fg:w="1"/><text x="93.6324%" y="319.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="94.1176%" y="453" width="0.7353%" height="15" fill="rgb(209,138,14)" fg:x="128" fg:w="1"/><text x="94.3676%" y="463.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="94.1176%" y="437" width="0.7353%" height="15" fill="rgb(222,18,33)" fg:x="128" fg:w="1"/><text x="94.3676%" y="447.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="94.1176%" y="421" width="0.7353%" height="15" fill="rgb(213,199,7)" fg:x="128" fg:w="1"/><text x="94.3676%" y="431.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="94.1176%" y="405" width="0.7353%" height="15" fill="rgb(250,110,10)" fg:x="128" fg:w="1"/><text x="94.3676%" y="415.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="94.1176%" y="389" width="0.7353%" height="15" fill="rgb(248,123,6)" fg:x="128" fg:w="1"/><text x="94.3676%" y="399.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="94.1176%" y="373" width="0.7353%" height="15" fill="rgb(206,91,31)" fg:x="128" fg:w="1"/><text x="94.3676%" y="383.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.74%)</title><rect x="94.1176%" y="357" width="0.7353%" height="15" fill="rgb(211,154,13)" fg:x="128" fg:w="1"/><text x="94.3676%" y="367.50"></text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (1 samples, 0.74%)</title><rect x="94.1176%" y="341" width="0.7353%" height="15" fill="rgb(225,148,7)" fg:x="128" fg:w="1"/><text x="94.3676%" y="351.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="94.1176%" y="325" width="0.7353%" height="15" fill="rgb(220,160,43)" fg:x="128" fg:w="1"/><text x="94.3676%" y="335.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.74%)</title><rect x="94.1176%" y="309" width="0.7353%" height="15" fill="rgb(213,52,39)" fg:x="128" fg:w="1"/><text x="94.3676%" y="319.50"></text></g><g><title>BIO_ctrl (1 samples, 0.74%)</title><rect x="94.1176%" y="293" width="0.7353%" height="15" fill="rgb(243,137,7)" fg:x="128" fg:w="1"/><text x="94.3676%" y="303.50"></text></g><g><title>BIO_write (1 samples, 0.74%)</title><rect x="94.1176%" y="277" width="0.7353%" height="15" fill="rgb(230,79,13)" fg:x="128" fg:w="1"/><text x="94.3676%" y="287.50"></text></g><g><title>openssl::ssl::bio::bwrite (1 samples, 0.74%)</title><rect x="94.1176%" y="261" width="0.7353%" height="15" fill="rgb(247,105,23)" fg:x="128" fg:w="1"/><text x="94.3676%" y="271.50"></text></g><g><title>aggregate_api::dapps::stargate_v2_taxi::inner_get_swap_quote::{{closure}} (2 samples, 1.47%)</title><rect x="94.1176%" y="597" width="1.4706%" height="15" fill="rgb(223,179,41)" fg:x="128" fg:w="2"/><text x="94.3676%" y="607.50"></text></g><g><title>aggregate_api::utils::utils::call_json_rpc::{{closure}} (2 samples, 1.47%)</title><rect x="94.1176%" y="581" width="1.4706%" height="15" fill="rgb(218,9,34)" fg:x="128" fg:w="2"/><text x="94.3676%" y="591.50"></text></g><g><title>&lt;ethers_providers::rpc::provider::Provider&lt;P&gt; as ethers_providers::middleware::Middleware&gt;::call::{{closure}} (2 samples, 1.47%)</title><rect x="94.1176%" y="565" width="1.4706%" height="15" fill="rgb(222,106,8)" fg:x="128" fg:w="2"/><text x="94.3676%" y="575.50"></text></g><g><title>&lt;tracing_futures::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="94.1176%" y="549" width="1.4706%" height="15" fill="rgb(211,220,0)" fg:x="128" fg:w="2"/><text x="94.3676%" y="559.50"></text></g><g><title>&lt;ethers_providers::rpc::transports::http::Provider as ethers_providers::rpc::connections::JsonRpcClient&gt;::request::{{closure}} (2 samples, 1.47%)</title><rect x="94.1176%" y="533" width="1.4706%" height="15" fill="rgb(229,52,16)" fg:x="128" fg:w="2"/><text x="94.3676%" y="543.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="94.1176%" y="517" width="1.4706%" height="15" fill="rgb(212,155,18)" fg:x="128" fg:w="2"/><text x="94.3676%" y="527.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="94.1176%" y="501" width="1.4706%" height="15" fill="rgb(242,21,14)" fg:x="128" fg:w="2"/><text x="94.3676%" y="511.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (2 samples, 1.47%)</title><rect x="94.1176%" y="485" width="1.4706%" height="15" fill="rgb(222,19,48)" fg:x="128" fg:w="2"/><text x="94.3676%" y="495.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (2 samples, 1.47%)</title><rect x="94.1176%" y="469" width="1.4706%" height="15" fill="rgb(232,45,27)" fg:x="128" fg:w="2"/><text x="94.3676%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::pool::Pooled&lt;hyper::client::client::PoolClient&lt;reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (1 samples, 0.74%)</title><rect x="94.8529%" y="453" width="0.7353%" height="15" fill="rgb(249,103,42)" fg:x="129" fg:w="1"/><text x="95.1029%" y="463.50"></text></g><g><title>&lt;hyper::client::pool::Pooled&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.74%)</title><rect x="94.8529%" y="437" width="0.7353%" height="15" fill="rgb(246,81,33)" fg:x="129" fg:w="1"/><text x="95.1029%" y="447.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.74%)</title><rect x="94.8529%" y="421" width="0.7353%" height="15" fill="rgb(252,33,42)" fg:x="129" fg:w="1"/><text x="95.1029%" y="431.50"></text></g><g><title>&lt;aggregate_api::dapps::symbiosis::TOKENS_DATA as core::ops::deref::Deref&gt;::deref (1 samples, 0.74%)</title><rect x="95.5882%" y="581" width="0.7353%" height="15" fill="rgb(209,212,41)" fg:x="130" fg:w="1"/><text x="95.8382%" y="591.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (1 samples, 0.74%)</title><rect x="95.5882%" y="565" width="0.7353%" height="15" fill="rgb(207,154,6)" fg:x="130" fg:w="1"/><text x="95.8382%" y="575.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.74%)</title><rect x="95.5882%" y="549" width="0.7353%" height="15" fill="rgb(223,64,47)" fg:x="130" fg:w="1"/><text x="95.8382%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="95.5882%" y="533" width="0.7353%" height="15" fill="rgb(211,161,38)" fg:x="130" fg:w="1"/><text x="95.8382%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="95.5882%" y="517" width="0.7353%" height="15" fill="rgb(219,138,40)" fg:x="130" fg:w="1"/><text x="95.8382%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="95.5882%" y="501" width="0.7353%" height="15" fill="rgb(241,228,46)" fg:x="130" fg:w="1"/><text x="95.8382%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="95.5882%" y="485" width="0.7353%" height="15" fill="rgb(223,209,38)" fg:x="130" fg:w="1"/><text x="95.8382%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="95.5882%" y="469" width="0.7353%" height="15" fill="rgb(236,164,45)" fg:x="130" fg:w="1"/><text x="95.8382%" y="479.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.74%)</title><rect x="95.5882%" y="453" width="0.7353%" height="15" fill="rgb(231,15,5)" fg:x="130" fg:w="1"/><text x="95.8382%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="95.5882%" y="437" width="0.7353%" height="15" fill="rgb(252,35,15)" fg:x="130" fg:w="1"/><text x="95.8382%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.74%)</title><rect x="95.5882%" y="421" width="0.7353%" height="15" fill="rgb(248,181,18)" fg:x="130" fg:w="1"/><text x="95.8382%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.74%)</title><rect x="95.5882%" y="405" width="0.7353%" height="15" fill="rgb(233,39,42)" fg:x="130" fg:w="1"/><text x="95.8382%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.74%)</title><rect x="95.5882%" y="389" width="0.7353%" height="15" fill="rgb(238,110,33)" fg:x="130" fg:w="1"/><text x="95.8382%" y="399.50"></text></g><g><title>aggregate_api::dapps::symbiosis::get_swap_quote::{{closure}} (2 samples, 1.47%)</title><rect x="95.5882%" y="597" width="1.4706%" height="15" fill="rgb(233,195,10)" fg:x="130" fg:w="2"/><text x="95.8382%" y="607.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="581" width="0.7353%" height="15" fill="rgb(254,105,3)" fg:x="131" fg:w="1"/><text x="96.5735%" y="591.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="565" width="0.7353%" height="15" fill="rgb(221,225,9)" fg:x="131" fg:w="1"/><text x="96.5735%" y="575.50"></text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="549" width="0.7353%" height="15" fill="rgb(224,227,45)" fg:x="131" fg:w="1"/><text x="96.5735%" y="559.50"></text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 0.74%)</title><rect x="96.3235%" y="533" width="0.7353%" height="15" fill="rgb(229,198,43)" fg:x="131" fg:w="1"/><text x="96.5735%" y="543.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="517" width="0.7353%" height="15" fill="rgb(206,209,35)" fg:x="131" fg:w="1"/><text x="96.5735%" y="527.50"></text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="501" width="0.7353%" height="15" fill="rgb(245,195,53)" fg:x="131" fg:w="1"/><text x="96.5735%" y="511.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="485" width="0.7353%" height="15" fill="rgb(240,92,26)" fg:x="131" fg:w="1"/><text x="96.5735%" y="495.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="469" width="0.7353%" height="15" fill="rgb(207,40,23)" fg:x="131" fg:w="1"/><text x="96.5735%" y="479.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="453" width="0.7353%" height="15" fill="rgb(223,111,35)" fg:x="131" fg:w="1"/><text x="96.5735%" y="463.50"></text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="437" width="0.7353%" height="15" fill="rgb(229,147,28)" fg:x="131" fg:w="1"/><text x="96.5735%" y="447.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.74%)</title><rect x="96.3235%" y="421" width="0.7353%" height="15" fill="rgb(211,29,28)" fg:x="131" fg:w="1"/><text x="96.5735%" y="431.50"></text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (1 samples, 0.74%)</title><rect x="96.3235%" y="405" width="0.7353%" height="15" fill="rgb(228,72,33)" fg:x="131" fg:w="1"/><text x="96.5735%" y="415.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.74%)</title><rect x="96.3235%" y="389" width="0.7353%" height="15" fill="rgb(205,214,31)" fg:x="131" fg:w="1"/><text x="96.5735%" y="399.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.74%)</title><rect x="96.3235%" y="373" width="0.7353%" height="15" fill="rgb(224,111,15)" fg:x="131" fg:w="1"/><text x="96.5735%" y="383.50"></text></g><g><title>&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (81 samples, 59.56%)</title><rect x="38.9706%" y="645" width="59.5588%" height="15" fill="rgb(253,21,26)" fg:x="53" fg:w="81"/><text x="39.2206%" y="655.50">&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (81 samples, 59.56%)</title><rect x="38.9706%" y="629" width="59.5588%" height="15" fill="rgb(245,139,43)" fg:x="53" fg:w="81"/><text x="39.2206%" y="639.50">&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (81 samples, 59.56%)</title><rect x="38.9706%" y="613" width="59.5588%" height="15" fill="rgb(252,170,7)" fg:x="53" fg:w="81"/><text x="39.2206%" y="623.50">&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>aggregate_api::dapps::xy::get_swap_quote::{{closure}} (2 samples, 1.47%)</title><rect x="97.0588%" y="597" width="1.4706%" height="15" fill="rgb(231,118,14)" fg:x="132" fg:w="2"/><text x="97.3088%" y="607.50"></text></g><g><title>aggregate_api::utils::format_swap_details::format_swap_details::{{closure}} (1 samples, 0.74%)</title><rect x="97.7941%" y="581" width="0.7353%" height="15" fill="rgb(238,83,0)" fg:x="133" fg:w="1"/><text x="98.0441%" y="591.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.74%)</title><rect x="97.7941%" y="565" width="0.7353%" height="15" fill="rgb(221,39,39)" fg:x="133" fg:w="1"/><text x="98.0441%" y="575.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.74%)</title><rect x="97.7941%" y="549" width="0.7353%" height="15" fill="rgb(222,119,46)" fg:x="133" fg:w="1"/><text x="98.0441%" y="559.50"></text></g><g><title>aggregate_api::services::quote_router::route_quote::{{closure}} (82 samples, 60.29%)</title><rect x="38.9706%" y="661" width="60.2941%" height="15" fill="rgb(222,165,49)" fg:x="53" fg:w="82"/><text x="39.2206%" y="671.50">aggregate_api::services::quote_router::route_quote::{{closure}}</text></g><g><title>aggregate_api::utils::utils::fetch_gas_price::{{closure}} (1 samples, 0.74%)</title><rect x="98.5294%" y="645" width="0.7353%" height="15" fill="rgb(219,113,52)" fg:x="134" fg:w="1"/><text x="98.7794%" y="655.50"></text></g><g><title>aggregate_api::utils::utils::get_random_rpc_proxy_provider (1 samples, 0.74%)</title><rect x="98.5294%" y="629" width="0.7353%" height="15" fill="rgb(214,7,15)" fg:x="134" fg:w="1"/><text x="98.7794%" y="639.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.74%)</title><rect x="98.5294%" y="613" width="0.7353%" height="15" fill="rgb(235,32,4)" fg:x="134" fg:w="1"/><text x="98.7794%" y="623.50"></text></g><g><title>all (136 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(238,90,54)" fg:x="0" fg:w="136"/><text x="0.2500%" y="879.50"></text></g><g><title>tokio-runtime-w (134 samples, 98.53%)</title><rect x="1.4706%" y="853" width="98.5294%" height="15" fill="rgb(213,208,19)" fg:x="2" fg:w="134"/><text x="1.7206%" y="863.50">tokio-runtime-w</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (134 samples, 98.53%)</title><rect x="1.4706%" y="837" width="98.5294%" height="15" fill="rgb(233,156,4)" fg:x="2" fg:w="134"/><text x="1.7206%" y="847.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (134 samples, 98.53%)</title><rect x="1.4706%" y="821" width="98.5294%" height="15" fill="rgb(207,194,5)" fg:x="2" fg:w="134"/><text x="1.7206%" y="831.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (134 samples, 98.53%)</title><rect x="1.4706%" y="805" width="98.5294%" height="15" fill="rgb(206,111,30)" fg:x="2" fg:w="134"/><text x="1.7206%" y="815.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (134 samples, 98.53%)</title><rect x="1.4706%" y="789" width="98.5294%" height="15" fill="rgb(243,70,54)" fg:x="2" fg:w="134"/><text x="1.7206%" y="799.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (134 samples, 98.53%)</title><rect x="1.4706%" y="773" width="98.5294%" height="15" fill="rgb(242,28,8)" fg:x="2" fg:w="134"/><text x="1.7206%" y="783.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (134 samples, 98.53%)</title><rect x="1.4706%" y="757" width="98.5294%" height="15" fill="rgb(219,106,18)" fg:x="2" fg:w="134"/><text x="1.7206%" y="767.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (134 samples, 98.53%)</title><rect x="1.4706%" y="741" width="98.5294%" height="15" fill="rgb(244,222,10)" fg:x="2" fg:w="134"/><text x="1.7206%" y="751.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (134 samples, 98.53%)</title><rect x="1.4706%" y="725" width="98.5294%" height="15" fill="rgb(236,179,52)" fg:x="2" fg:w="134"/><text x="1.7206%" y="735.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (134 samples, 98.53%)</title><rect x="1.4706%" y="709" width="98.5294%" height="15" fill="rgb(213,23,39)" fg:x="2" fg:w="134"/><text x="1.7206%" y="719.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (114 samples, 83.82%)</title><rect x="16.1765%" y="693" width="83.8235%" height="15" fill="rgb(238,48,10)" fg:x="22" fg:w="114"/><text x="16.4265%" y="703.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (89 samples, 65.44%)</title><rect x="34.5588%" y="677" width="65.4412%" height="15" fill="rgb(251,196,23)" fg:x="47" fg:w="89"/><text x="34.8088%" y="687.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (1 samples, 0.74%)</title><rect x="99.2647%" y="661" width="0.7353%" height="15" fill="rgb(250,152,24)" fg:x="135" fg:w="1"/><text x="99.5147%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::server::server::new_svc::NewSvcTask&lt;hyper::server::tcp::addr_stream::AddrStream,axum::routing::into_make_service::IntoMakeServiceFuture&lt;axum::routing::Router&gt;,axum::routing::Router,hyper::common::exec::Exec,hyper::server::server::NoopWatcher&gt;&gt; (1 samples, 0.74%)</title><rect x="99.2647%" y="645" width="0.7353%" height="15" fill="rgb(209,150,17)" fg:x="135" fg:w="1"/><text x="99.5147%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::Router&gt; (1 samples, 0.74%)</title><rect x="99.2647%" y="629" width="0.7353%" height="15" fill="rgb(234,202,34)" fg:x="135" fg:w="1"/><text x="99.5147%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.74%)</title><rect x="99.2647%" y="613" width="0.7353%" height="15" fill="rgb(253,148,53)" fg:x="135" fg:w="1"/><text x="99.5147%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::method_routing::MethodRouter&lt;alloc::sync::Arc&lt;aggregate_api::load_resources::AppState&gt;&gt;&gt; (1 samples, 0.74%)</title><rect x="99.2647%" y="597" width="0.7353%" height="15" fill="rgb(218,129,16)" fg:x="135" fg:w="1"/><text x="99.5147%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::Fallback&lt;(),hyper::body::body::Body&gt;&gt; (1 samples, 0.74%)</title><rect x="99.2647%" y="581" width="0.7353%" height="15" fill="rgb(216,85,19)" fg:x="135" fg:w="1"/><text x="99.5147%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_response::MapResponse&lt;tower::util::map_err::MapErr&lt;tower::util::map_response::MapResponse&lt;tower_http::cors::Cors&lt;axum::routing::route::Route&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;,&lt;core::convert::Infallible as core::convert::Into&lt;core::convert::Infallible&gt;&gt;::into&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;,tower::util::boxed_clone::BoxCloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;tower::util::map_response::MapResponse&lt;tower::util::map_err::MapErr&lt;tower::util::map_response::MapResponse&lt;tower_http::cors::Cors&lt;axum::routing::route::Route&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;,&lt;core::convert::Infallible as core::convert::Into&lt;core::convert::Infallible&gt;&gt;::into&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.74%)</title><rect x="99.2647%" y="565" width="0.7353%" height="15" fill="rgb(235,228,7)" fg:x="135" fg:w="1"/><text x="99.5147%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_future::MapFuture&lt;tower::util::map_response::MapResponse&lt;tower::util::map_err::MapErr&lt;tower::util::map_response::MapResponse&lt;tower_http::trace::service::Trace&lt;axum::routing::route::Route,tower_http::classify::SharedClassifier&lt;tower_http::classify::ServerErrorsAsFailures&gt;,tower_http::trace::make_span::DefaultMakeSpan,aggregate_api::main::{{closure}}::{{closure}}&gt;,&lt;http::response::Response&lt;tower_http::trace::body::ResponseBody&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;,tower_http::classify::NeverClassifyEos&lt;tower_http::classify::ServerErrorsFailureClass&gt;,tower_http::trace::on_body_chunk::DefaultOnBodyChunk,tower_http::trace::on_eos::DefaultOnEos,tower_http::trace::on_failure::DefaultOnFailure&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;,&lt;core::convert::Infallible as core::convert::Into&lt;core::convert::Infallible&gt;&gt;::into&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;,tower::util::boxed_clone::BoxCloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;::new&lt;tower::util::map_response::MapResponse&lt;tower::util::map_err::MapErr&lt;tower::util::map_response::MapResponse&lt;tower_http::trace::service::Trace&lt;axum::routing::route::Route,tower_http::classify::SharedClassifier&lt;tower_http::classify::ServerErrorsAsFailures&gt;,tower_http::trace::make_span::DefaultMakeSpan,aggregate_api::main::{{closure}}::{{closure}}&gt;,&lt;http::response::Response&lt;tower_http::trace::body::ResponseBody&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;,tower_http::classify::NeverClassifyEos&lt;tower_http::classify::ServerErrorsFailureClass&gt;,tower_http::trace::on_body_chunk::DefaultOnBodyChunk,tower_http::trace::on_eos::DefaultOnEos,tower_http::trace::on_failure::DefaultOnFailure&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;,&lt;core::convert::Infallible as core::convert::Into&lt;core::convert::Infallible&gt;&gt;::into&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;&gt;::{{closure}}&gt;&gt; (1 samples, 0.74%)</title><rect x="99.2647%" y="549" width="0.7353%" height="15" fill="rgb(245,175,0)" fg:x="135" fg:w="1"/><text x="99.5147%" y="559.50"></text></g></svg></svg>