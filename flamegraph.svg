<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="54"><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (1 samples, 1.85%)</title><rect x="0.0000%" y="597" width="1.8519%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 1.85%)</title><rect x="1.8519%" y="597" width="1.8519%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="2.1019%" y="607.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 1.85%)</title><rect x="1.8519%" y="581" width="1.8519%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="2.1019%" y="591.50">h..</text></g><g><title>aggregate_api (3 samples, 5.56%)</title><rect x="0.0000%" y="757" width="5.5556%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="767.50">aggrega..</text></g><g><title>_start (3 samples, 5.56%)</title><rect x="0.0000%" y="741" width="5.5556%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="751.50">_start</text></g><g><title>__libc_start_main (3 samples, 5.56%)</title><rect x="0.0000%" y="725" width="5.5556%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="735.50">__libc_..</text></g><g><title>main (3 samples, 5.56%)</title><rect x="0.0000%" y="709" width="5.5556%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="719.50">main</text></g><g><title>std::rt::lang_start_internal (3 samples, 5.56%)</title><rect x="0.0000%" y="693" width="5.5556%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="703.50">std::rt..</text></g><g><title>std::rt::lang_start::{{closure}} (3 samples, 5.56%)</title><rect x="0.0000%" y="677" width="5.5556%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="687.50">std::rt..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 5.56%)</title><rect x="0.0000%" y="661" width="5.5556%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.2500%" y="671.50">std::sy..</text></g><g><title>aggregate_api::main (3 samples, 5.56%)</title><rect x="0.0000%" y="645" width="5.5556%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="655.50">aggrega..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (3 samples, 5.56%)</title><rect x="0.0000%" y="629" width="5.5556%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="639.50">tokio::..</text></g><g><title>aggregate_api::main::{{closure}} (3 samples, 5.56%)</title><rect x="0.0000%" y="613" width="5.5556%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="3"/><text x="0.2500%" y="623.50">aggrega..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 1.85%)</title><rect x="3.7037%" y="597" width="1.8519%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="3.9537%" y="607.50">s..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 1.85%)</title><rect x="3.7037%" y="581" width="1.8519%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="3.9537%" y="591.50">&lt;..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 1.85%)</title><rect x="3.7037%" y="565" width="1.8519%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="3.9537%" y="575.50">i..</text></g><g><title>std::time::Instant::duration_since (1 samples, 1.85%)</title><rect x="7.4074%" y="533" width="1.8519%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="7.6574%" y="543.50">s..</text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 1.85%)</title><rect x="7.4074%" y="517" width="1.8519%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="7.6574%" y="527.50">s..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (3 samples, 5.56%)</title><rect x="7.4074%" y="549" width="5.5556%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="3"/><text x="7.6574%" y="559.50">tokio::..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (2 samples, 3.70%)</title><rect x="9.2593%" y="533" width="3.7037%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="2"/><text x="9.5093%" y="543.50">toki..</text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (2 samples, 3.70%)</title><rect x="9.2593%" y="517" width="3.7037%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="2"/><text x="9.5093%" y="527.50">toki..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 3.70%)</title><rect x="9.2593%" y="501" width="3.7037%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="2"/><text x="9.5093%" y="511.50">toki..</text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (2 samples, 3.70%)</title><rect x="9.2593%" y="485" width="3.7037%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="2"/><text x="9.5093%" y="495.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (4 samples, 7.41%)</title><rect x="7.4074%" y="597" width="7.4074%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="4"/><text x="7.6574%" y="607.50">tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (4 samples, 7.41%)</title><rect x="7.4074%" y="581" width="7.4074%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="4"/><text x="7.6574%" y="591.50">tokio::run..</text></g><g><title>tokio::runtime::time::Driver::park_internal (4 samples, 7.41%)</title><rect x="7.4074%" y="565" width="7.4074%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="4"/><text x="7.6574%" y="575.50">tokio::run..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 1.85%)</title><rect x="12.9630%" y="549" width="1.8519%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="13.2130%" y="559.50">t..</text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 1.85%)</title><rect x="12.9630%" y="533" width="1.8519%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="13.2130%" y="543.50">t..</text></g><g><title>hyper::body::body::Sender::poll_ready (1 samples, 1.85%)</title><rect x="16.6667%" y="485" width="1.8519%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="16.9167%" y="495.50">h..</text></g><g><title>hyper::body::body::Sender::try_send_data (2 samples, 3.70%)</title><rect x="18.5185%" y="485" width="3.7037%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="2"/><text x="18.7685%" y="495.50">hype..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (2 samples, 3.70%)</title><rect x="18.5185%" y="469" width="3.7037%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="2"/><text x="18.7685%" y="479.50">futu..</text></g><g><title>futures_task::waker::wake_arc_raw (1 samples, 1.85%)</title><rect x="20.3704%" y="453" width="1.8519%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="20.6204%" y="463.50">f..</text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (1 samples, 1.85%)</title><rect x="20.3704%" y="437" width="1.8519%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="20.6204%" y="447.50">&lt;..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 1.85%)</title><rect x="22.2222%" y="469" width="1.8519%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="1"/><text x="22.4722%" y="479.50">h..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 1.85%)</title><rect x="22.2222%" y="453" width="1.8519%" height="15" fill="rgb(241,83,37)" fg:x="12" fg:w="1"/><text x="22.4722%" y="463.50">h..</text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 1.85%)</title><rect x="22.2222%" y="437" width="1.8519%" height="15" fill="rgb(233,36,39)" fg:x="12" fg:w="1"/><text x="22.4722%" y="447.50">&lt;..</text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (1 samples, 1.85%)</title><rect x="22.2222%" y="421" width="1.8519%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="1"/><text x="22.4722%" y="431.50">t..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 1.85%)</title><rect x="25.9259%" y="309" width="1.8519%" height="15" fill="rgb(245,192,40)" fg:x="14" fg:w="1"/><text x="26.1759%" y="319.50">&lt;..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (4 samples, 7.41%)</title><rect x="22.2222%" y="485" width="7.4074%" height="15" fill="rgb(238,167,29)" fg:x="12" fg:w="4"/><text x="22.4722%" y="495.50">hyper::pro..</text></g><g><title>hyper::proto::h1::decode::Decoder::decode (3 samples, 5.56%)</title><rect x="24.0741%" y="469" width="5.5556%" height="15" fill="rgb(232,182,51)" fg:x="13" fg:w="3"/><text x="24.3241%" y="479.50">hyper::..</text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (3 samples, 5.56%)</title><rect x="24.0741%" y="453" width="5.5556%" height="15" fill="rgb(231,60,39)" fg:x="13" fg:w="3"/><text x="24.3241%" y="463.50">&lt;hyper:..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (3 samples, 5.56%)</title><rect x="24.0741%" y="437" width="5.5556%" height="15" fill="rgb(208,69,12)" fg:x="13" fg:w="3"/><text x="24.3241%" y="447.50">hyper::..</text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 5.56%)</title><rect x="24.0741%" y="421" width="5.5556%" height="15" fill="rgb(235,93,37)" fg:x="13" fg:w="3"/><text x="24.3241%" y="431.50">&lt;reqwes..</text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (3 samples, 5.56%)</title><rect x="24.0741%" y="405" width="5.5556%" height="15" fill="rgb(213,116,39)" fg:x="13" fg:w="3"/><text x="24.3241%" y="415.50">tokio_n..</text></g><g><title>SSL_read_ex (3 samples, 5.56%)</title><rect x="24.0741%" y="389" width="5.5556%" height="15" fill="rgb(222,207,29)" fg:x="13" fg:w="3"/><text x="24.3241%" y="399.50">SSL_rea..</text></g><g><title>BIO_read (3 samples, 5.56%)</title><rect x="24.0741%" y="373" width="5.5556%" height="15" fill="rgb(206,96,30)" fg:x="13" fg:w="3"/><text x="24.3241%" y="383.50">BIO_read</text></g><g><title>openssl::ssl::bio::bread (3 samples, 5.56%)</title><rect x="24.0741%" y="357" width="5.5556%" height="15" fill="rgb(218,138,4)" fg:x="13" fg:w="3"/><text x="24.3241%" y="367.50">openssl..</text></g><g><title>&lt;tokio_native_tls::AllowStd&lt;S&gt; as std::io::Read&gt;::read (3 samples, 5.56%)</title><rect x="24.0741%" y="341" width="5.5556%" height="15" fill="rgb(250,191,14)" fg:x="13" fg:w="3"/><text x="24.3241%" y="351.50">&lt;tokio_..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (3 samples, 5.56%)</title><rect x="24.0741%" y="325" width="5.5556%" height="15" fill="rgb(239,60,40)" fg:x="13" fg:w="3"/><text x="24.3241%" y="335.50">tokio::..</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 1.85%)</title><rect x="27.7778%" y="309" width="1.8519%" height="15" fill="rgb(206,27,48)" fg:x="15" fg:w="1"/><text x="28.0278%" y="319.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 1.85%)</title><rect x="27.7778%" y="293" width="1.8519%" height="15" fill="rgb(225,35,8)" fg:x="15" fg:w="1"/><text x="28.0278%" y="303.50">t..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (2 samples, 3.70%)</title><rect x="29.6296%" y="485" width="3.7037%" height="15" fill="rgb(250,213,24)" fg:x="16" fg:w="2"/><text x="29.8796%" y="495.50">hype..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (2 samples, 3.70%)</title><rect x="29.6296%" y="469" width="3.7037%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="2"/><text x="29.8796%" y="479.50">hype..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2 samples, 3.70%)</title><rect x="29.6296%" y="453" width="3.7037%" height="15" fill="rgb(231,138,38)" fg:x="16" fg:w="2"/><text x="29.8796%" y="463.50">hype..</text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 3.70%)</title><rect x="29.6296%" y="437" width="3.7037%" height="15" fill="rgb(231,145,46)" fg:x="16" fg:w="2"/><text x="29.8796%" y="447.50">&lt;req..</text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (2 samples, 3.70%)</title><rect x="29.6296%" y="421" width="3.7037%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="2"/><text x="29.8796%" y="431.50">toki..</text></g><g><title>SSL_read_ex (1 samples, 1.85%)</title><rect x="31.4815%" y="405" width="1.8519%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="1"/><text x="31.7315%" y="415.50">S..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (1 samples, 1.85%)</title><rect x="33.3333%" y="485" width="1.8519%" height="15" fill="rgb(247,81,37)" fg:x="18" fg:w="1"/><text x="33.5833%" y="495.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (1 samples, 1.85%)</title><rect x="33.3333%" y="469" width="1.8519%" height="15" fill="rgb(209,12,38)" fg:x="18" fg:w="1"/><text x="33.5833%" y="479.50">h..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 1.85%)</title><rect x="33.3333%" y="453" width="1.8519%" height="15" fill="rgb(227,1,9)" fg:x="18" fg:w="1"/><text x="33.5833%" y="463.50">h..</text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 1.85%)</title><rect x="33.3333%" y="437" width="1.8519%" height="15" fill="rgb(248,47,43)" fg:x="18" fg:w="1"/><text x="33.5833%" y="447.50">&lt;..</text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (1 samples, 1.85%)</title><rect x="33.3333%" y="421" width="1.8519%" height="15" fill="rgb(221,10,30)" fg:x="18" fg:w="1"/><text x="33.5833%" y="431.50">t..</text></g><g><title>SSL_read_ex (1 samples, 1.85%)</title><rect x="33.3333%" y="405" width="1.8519%" height="15" fill="rgb(210,229,1)" fg:x="18" fg:w="1"/><text x="33.5833%" y="415.50">S..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (13 samples, 24.07%)</title><rect x="14.8148%" y="533" width="24.0741%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="13"/><text x="15.0648%" y="543.50">&lt;hyper::client::conn::Connection&lt;T,B&gt; ..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (13 samples, 24.07%)</title><rect x="14.8148%" y="517" width="24.0741%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="13"/><text x="15.0648%" y="527.50">hyper::proto::h1::dispatch::Dispatcher..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (13 samples, 24.07%)</title><rect x="14.8148%" y="501" width="24.0741%" height="15" fill="rgb(247,98,35)" fg:x="8" fg:w="13"/><text x="15.0648%" y="511.50">hyper::proto::h1::dispatch::Dispatcher..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (2 samples, 3.70%)</title><rect x="35.1852%" y="485" width="3.7037%" height="15" fill="rgb(247,138,52)" fg:x="19" fg:w="2"/><text x="35.4352%" y="495.50">hype..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (14 samples, 25.93%)</title><rect x="14.8148%" y="581" width="25.9259%" height="15" fill="rgb(213,79,30)" fg:x="8" fg:w="14"/><text x="15.0648%" y="591.50">tokio::runtime::task::harness::Harness&lt;T,..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (14 samples, 25.93%)</title><rect x="14.8148%" y="565" width="25.9259%" height="15" fill="rgb(246,177,23)" fg:x="8" fg:w="14"/><text x="15.0648%" y="575.50">tokio::runtime::task::core::Core&lt;T,S&gt;::po..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (14 samples, 25.93%)</title><rect x="14.8148%" y="549" width="25.9259%" height="15" fill="rgb(230,62,27)" fg:x="8" fg:w="14"/><text x="15.0648%" y="559.50">&lt;futures_util::future::future::map::Map&lt;F..</text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::pool::Pooled&lt;hyper::client::client::PoolClient&lt;reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (1 samples, 1.85%)</title><rect x="38.8889%" y="533" width="1.8519%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="1"/><text x="39.1389%" y="543.50">c..</text></g><g><title>&lt;hyper::client::pool::Pooled&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.85%)</title><rect x="38.8889%" y="517" width="1.8519%" height="15" fill="rgb(244,35,45)" fg:x="21" fg:w="1"/><text x="39.1389%" y="527.50">&lt;..</text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="565" width="1.8519%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="1"/><text x="40.9907%" y="575.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (1 samples, 1.85%)</title><rect x="40.7407%" y="549" width="1.8519%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="1"/><text x="40.9907%" y="559.50">h..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="533" width="1.8519%" height="15" fill="rgb(233,84,52)" fg:x="22" fg:w="1"/><text x="40.9907%" y="543.50">&lt;..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="517" width="1.8519%" height="15" fill="rgb(207,117,47)" fg:x="22" fg:w="1"/><text x="40.9907%" y="527.50">&lt;..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="501" width="1.8519%" height="15" fill="rgb(249,43,39)" fg:x="22" fg:w="1"/><text x="40.9907%" y="511.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="485" width="1.8519%" height="15" fill="rgb(209,38,44)" fg:x="22" fg:w="1"/><text x="40.9907%" y="495.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="469" width="1.8519%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="1"/><text x="40.9907%" y="479.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="453" width="1.8519%" height="15" fill="rgb(242,79,21)" fg:x="22" fg:w="1"/><text x="40.9907%" y="463.50">&lt;..</text></g><g><title>&lt;tower_http::cors::ResponseFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="437" width="1.8519%" height="15" fill="rgb(211,96,35)" fg:x="22" fg:w="1"/><text x="40.9907%" y="447.50">&lt;..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="421" width="1.8519%" height="15" fill="rgb(253,215,40)" fg:x="22" fg:w="1"/><text x="40.9907%" y="431.50">&lt;..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="405" width="1.8519%" height="15" fill="rgb(211,81,21)" fg:x="22" fg:w="1"/><text x="40.9907%" y="415.50">&lt;..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="389" width="1.8519%" height="15" fill="rgb(208,190,38)" fg:x="22" fg:w="1"/><text x="40.9907%" y="399.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="373" width="1.8519%" height="15" fill="rgb(235,213,38)" fg:x="22" fg:w="1"/><text x="40.9907%" y="383.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="357" width="1.8519%" height="15" fill="rgb(237,122,38)" fg:x="22" fg:w="1"/><text x="40.9907%" y="367.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="341" width="1.8519%" height="15" fill="rgb(244,218,35)" fg:x="22" fg:w="1"/><text x="40.9907%" y="351.50">&lt;..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="325" width="1.8519%" height="15" fill="rgb(240,68,47)" fg:x="22" fg:w="1"/><text x="40.9907%" y="335.50">&lt;..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="309" width="1.8519%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="1"/><text x="40.9907%" y="319.50">&lt;..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="293" width="1.8519%" height="15" fill="rgb(235,124,12)" fg:x="22" fg:w="1"/><text x="40.9907%" y="303.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="277" width="1.8519%" height="15" fill="rgb(224,169,11)" fg:x="22" fg:w="1"/><text x="40.9907%" y="287.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="261" width="1.8519%" height="15" fill="rgb(250,166,2)" fg:x="22" fg:w="1"/><text x="40.9907%" y="271.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="245" width="1.8519%" height="15" fill="rgb(242,216,29)" fg:x="22" fg:w="1"/><text x="40.9907%" y="255.50">&lt;..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="229" width="1.8519%" height="15" fill="rgb(230,116,27)" fg:x="22" fg:w="1"/><text x="40.9907%" y="239.50">&lt;..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="213" width="1.8519%" height="15" fill="rgb(228,99,48)" fg:x="22" fg:w="1"/><text x="40.9907%" y="223.50">&lt;..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="197" width="1.8519%" height="15" fill="rgb(253,11,6)" fg:x="22" fg:w="1"/><text x="40.9907%" y="207.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="181" width="1.8519%" height="15" fill="rgb(247,143,39)" fg:x="22" fg:w="1"/><text x="40.9907%" y="191.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="40.7407%" y="165" width="1.8519%" height="15" fill="rgb(236,97,10)" fg:x="22" fg:w="1"/><text x="40.9907%" y="175.50">&lt;..</text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1,T2),S,B&gt;&gt;::call::{{closure}} (1 samples, 1.85%)</title><rect x="40.7407%" y="149" width="1.8519%" height="15" fill="rgb(233,208,19)" fg:x="22" fg:w="1"/><text x="40.9907%" y="159.50">&lt;..</text></g><g><title>aggregate_api::paths::quote::handle_quote_request::{{closure}} (1 samples, 1.85%)</title><rect x="40.7407%" y="133" width="1.8519%" height="15" fill="rgb(216,164,2)" fg:x="22" fg:w="1"/><text x="40.9907%" y="143.50">a..</text></g><g><title>aggregate_api::paths::validate_params::validate_required_params (1 samples, 1.85%)</title><rect x="40.7407%" y="117" width="1.8519%" height="15" fill="rgb(220,129,5)" fg:x="22" fg:w="1"/><text x="40.9907%" y="127.50">a..</text></g><g><title>regex::regex::string::Regex::new (1 samples, 1.85%)</title><rect x="40.7407%" y="101" width="1.8519%" height="15" fill="rgb(242,17,10)" fg:x="22" fg:w="1"/><text x="40.9907%" y="111.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (1 samples, 1.85%)</title><rect x="40.7407%" y="85" width="1.8519%" height="15" fill="rgb(242,107,0)" fg:x="22" fg:w="1"/><text x="40.9907%" y="95.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (1 samples, 1.85%)</title><rect x="40.7407%" y="69" width="1.8519%" height="15" fill="rgb(251,28,31)" fg:x="22" fg:w="1"/><text x="40.9907%" y="79.50">r..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 1.85%)</title><rect x="40.7407%" y="53" width="1.8519%" height="15" fill="rgb(233,223,10)" fg:x="22" fg:w="1"/><text x="40.9907%" y="63.50">r..</text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 1.85%)</title><rect x="40.7407%" y="37" width="1.8519%" height="15" fill="rgb(215,21,27)" fg:x="22" fg:w="1"/><text x="40.9907%" y="47.50">r..</text></g><g><title>aggregate_api::main::{{closure}}::{{closure}} (1 samples, 1.85%)</title><rect x="42.5926%" y="565" width="1.8519%" height="15" fill="rgb(232,23,21)" fg:x="23" fg:w="1"/><text x="42.8426%" y="575.50">a..</text></g><g><title>aggregate_api::load_resources::load_json (1 samples, 1.85%)</title><rect x="42.5926%" y="549" width="1.8519%" height="15" fill="rgb(244,5,23)" fg:x="23" fg:w="1"/><text x="42.8426%" y="559.50">a..</text></g><g><title>serde_json::de::from_trait (1 samples, 1.85%)</title><rect x="42.5926%" y="533" width="1.8519%" height="15" fill="rgb(226,81,46)" fg:x="23" fg:w="1"/><text x="42.8426%" y="543.50">s..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="42.5926%" y="517" width="1.8519%" height="15" fill="rgb(247,70,30)" fg:x="23" fg:w="1"/><text x="42.8426%" y="527.50">s..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 1.85%)</title><rect x="42.5926%" y="501" width="1.8519%" height="15" fill="rgb(212,68,19)" fg:x="23" fg:w="1"/><text x="42.8426%" y="511.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="42.5926%" y="485" width="1.8519%" height="15" fill="rgb(240,187,13)" fg:x="23" fg:w="1"/><text x="42.8426%" y="495.50">s..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 1.85%)</title><rect x="42.5926%" y="469" width="1.8519%" height="15" fill="rgb(223,113,26)" fg:x="23" fg:w="1"/><text x="42.8426%" y="479.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="42.5926%" y="453" width="1.8519%" height="15" fill="rgb(206,192,2)" fg:x="23" fg:w="1"/><text x="42.8426%" y="463.50">s..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 1.85%)</title><rect x="42.5926%" y="437" width="1.8519%" height="15" fill="rgb(241,108,4)" fg:x="23" fg:w="1"/><text x="42.8426%" y="447.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="42.5926%" y="421" width="1.8519%" height="15" fill="rgb(247,173,49)" fg:x="23" fg:w="1"/><text x="42.8426%" y="431.50">s..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 1.85%)</title><rect x="42.5926%" y="405" width="1.8519%" height="15" fill="rgb(224,114,35)" fg:x="23" fg:w="1"/><text x="42.8426%" y="415.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="42.5926%" y="389" width="1.8519%" height="15" fill="rgb(245,159,27)" fg:x="23" fg:w="1"/><text x="42.8426%" y="399.50">s..</text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="437" width="1.8519%" height="15" fill="rgb(245,172,44)" fg:x="24" fg:w="1"/><text x="44.6944%" y="447.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="421" width="1.8519%" height="15" fill="rgb(236,23,11)" fg:x="24" fg:w="1"/><text x="44.6944%" y="431.50">&lt;..</text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="405" width="1.8519%" height="15" fill="rgb(205,117,38)" fg:x="24" fg:w="1"/><text x="44.6944%" y="415.50">&lt;..</text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 1.85%)</title><rect x="44.4444%" y="389" width="1.8519%" height="15" fill="rgb(237,72,25)" fg:x="24" fg:w="1"/><text x="44.6944%" y="399.50">h..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="373" width="1.8519%" height="15" fill="rgb(244,70,9)" fg:x="24" fg:w="1"/><text x="44.6944%" y="383.50">&lt;..</text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="357" width="1.8519%" height="15" fill="rgb(217,125,39)" fg:x="24" fg:w="1"/><text x="44.6944%" y="367.50">&lt;..</text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="341" width="1.8519%" height="15" fill="rgb(235,36,10)" fg:x="24" fg:w="1"/><text x="44.6944%" y="351.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="325" width="1.8519%" height="15" fill="rgb(251,123,47)" fg:x="24" fg:w="1"/><text x="44.6944%" y="335.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="309" width="1.8519%" height="15" fill="rgb(221,13,13)" fg:x="24" fg:w="1"/><text x="44.6944%" y="319.50">&lt;..</text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="293" width="1.8519%" height="15" fill="rgb(238,131,9)" fg:x="24" fg:w="1"/><text x="44.6944%" y="303.50">&lt;..</text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 1.85%)</title><rect x="44.4444%" y="277" width="1.8519%" height="15" fill="rgb(211,50,8)" fg:x="24" fg:w="1"/><text x="44.6944%" y="287.50">r..</text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (1 samples, 1.85%)</title><rect x="44.4444%" y="261" width="1.8519%" height="15" fill="rgb(245,182,24)" fg:x="24" fg:w="1"/><text x="44.6944%" y="271.50">r..</text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="44.4444%" y="245" width="1.8519%" height="15" fill="rgb(242,14,37)" fg:x="24" fg:w="1"/><text x="44.6944%" y="255.50">&lt;..</text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 1.85%)</title><rect x="44.4444%" y="229" width="1.8519%" height="15" fill="rgb(246,228,12)" fg:x="24" fg:w="1"/><text x="44.6944%" y="239.50">n..</text></g><g><title>aggregate_api::dapps::bungee::get_swap_quote::{{closure}} (2 samples, 3.70%)</title><rect x="44.4444%" y="453" width="3.7037%" height="15" fill="rgb(213,55,15)" fg:x="24" fg:w="2"/><text x="44.6944%" y="463.50">aggr..</text></g><g><title>aggregate_api::utils::format_swap_details::format_swap_details::{{closure}} (1 samples, 1.85%)</title><rect x="46.2963%" y="437" width="1.8519%" height="15" fill="rgb(209,9,3)" fg:x="25" fg:w="1"/><text x="46.5463%" y="447.50">a..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 1.85%)</title><rect x="46.2963%" y="421" width="1.8519%" height="15" fill="rgb(230,59,30)" fg:x="25" fg:w="1"/><text x="46.5463%" y="431.50">&lt;..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (1 samples, 1.85%)</title><rect x="46.2963%" y="405" width="1.8519%" height="15" fill="rgb(209,121,21)" fg:x="25" fg:w="1"/><text x="46.5463%" y="415.50">i..</text></g><g><title>aggregate_api::dapps::dododex::get_swap_quote::{{closure}} (1 samples, 1.85%)</title><rect x="48.1481%" y="453" width="1.8519%" height="15" fill="rgb(220,109,13)" fg:x="26" fg:w="1"/><text x="48.3981%" y="463.50">a..</text></g><g><title>reqwest::async_impl::response::Response::json::{{closure}} (1 samples, 1.85%)</title><rect x="48.1481%" y="437" width="1.8519%" height="15" fill="rgb(232,18,1)" fg:x="26" fg:w="1"/><text x="48.3981%" y="447.50">r..</text></g><g><title>serde_json::de::from_slice (1 samples, 1.85%)</title><rect x="48.1481%" y="421" width="1.8519%" height="15" fill="rgb(215,41,42)" fg:x="26" fg:w="1"/><text x="48.3981%" y="431.50">s..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="48.1481%" y="405" width="1.8519%" height="15" fill="rgb(224,123,36)" fg:x="26" fg:w="1"/><text x="48.3981%" y="415.50">s..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 1.85%)</title><rect x="48.1481%" y="389" width="1.8519%" height="15" fill="rgb(240,125,3)" fg:x="26" fg:w="1"/><text x="48.3981%" y="399.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="48.1481%" y="373" width="1.8519%" height="15" fill="rgb(205,98,50)" fg:x="26" fg:w="1"/><text x="48.3981%" y="383.50">s..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 1.85%)</title><rect x="48.1481%" y="357" width="1.8519%" height="15" fill="rgb(205,185,37)" fg:x="26" fg:w="1"/><text x="48.3981%" y="367.50">&lt;..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 1.85%)</title><rect x="48.1481%" y="341" width="1.8519%" height="15" fill="rgb(238,207,15)" fg:x="26" fg:w="1"/><text x="48.3981%" y="351.50">&lt;..</text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 1.85%)</title><rect x="48.1481%" y="325" width="1.8519%" height="15" fill="rgb(213,199,42)" fg:x="26" fg:w="1"/><text x="48.3981%" y="335.50">&lt;..</text></g><g><title>core::str::converts::from_utf8 (1 samples, 1.85%)</title><rect x="48.1481%" y="309" width="1.8519%" height="15" fill="rgb(235,201,11)" fg:x="26" fg:w="1"/><text x="48.3981%" y="319.50">c..</text></g><g><title>aggregate_api::dapps::kyberswap::get_swap_quote::{{closure}} (1 samples, 1.85%)</title><rect x="50.0000%" y="453" width="1.8519%" height="15" fill="rgb(207,46,11)" fg:x="27" fg:w="1"/><text x="50.2500%" y="463.50">a..</text></g><g><title>reqwest::async_impl::client::Client::request (1 samples, 1.85%)</title><rect x="50.0000%" y="437" width="1.8519%" height="15" fill="rgb(241,35,35)" fg:x="27" fg:w="1"/><text x="50.2500%" y="447.50">r..</text></g><g><title>&lt;&amp;alloc::string::String as reqwest::into_url::IntoUrlSealed&gt;::into_url (1 samples, 1.85%)</title><rect x="50.0000%" y="421" width="1.8519%" height="15" fill="rgb(243,32,47)" fg:x="27" fg:w="1"/><text x="50.2500%" y="431.50">&lt;..</text></g><g><title>url::ParseOptions::parse (1 samples, 1.85%)</title><rect x="50.0000%" y="405" width="1.8519%" height="15" fill="rgb(247,202,23)" fg:x="27" fg:w="1"/><text x="50.2500%" y="415.50">u..</text></g><g><title>url::parser::Parser::parse_url (1 samples, 1.85%)</title><rect x="50.0000%" y="389" width="1.8519%" height="15" fill="rgb(219,102,11)" fg:x="27" fg:w="1"/><text x="50.2500%" y="399.50">u..</text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 1.85%)</title><rect x="50.0000%" y="373" width="1.8519%" height="15" fill="rgb(243,110,44)" fg:x="27" fg:w="1"/><text x="50.2500%" y="383.50">u..</text></g><g><title>url::parser::Parser::parse_host (1 samples, 1.85%)</title><rect x="50.0000%" y="357" width="1.8519%" height="15" fill="rgb(222,74,54)" fg:x="27" fg:w="1"/><text x="50.2500%" y="367.50">u..</text></g><g><title>url::host::Host::parse (1 samples, 1.85%)</title><rect x="50.0000%" y="341" width="1.8519%" height="15" fill="rgb(216,99,12)" fg:x="27" fg:w="1"/><text x="50.2500%" y="351.50">u..</text></g><g><title>idna::domain_to_ascii (1 samples, 1.85%)</title><rect x="50.0000%" y="325" width="1.8519%" height="15" fill="rgb(226,22,26)" fg:x="27" fg:w="1"/><text x="50.2500%" y="335.50">i..</text></g><g><title>idna::uts46::Config::to_ascii (1 samples, 1.85%)</title><rect x="50.0000%" y="309" width="1.8519%" height="15" fill="rgb(217,163,10)" fg:x="27" fg:w="1"/><text x="50.2500%" y="319.50">i..</text></g><g><title>idna::uts46::Idna::to_ascii (1 samples, 1.85%)</title><rect x="50.0000%" y="293" width="1.8519%" height="15" fill="rgb(213,25,53)" fg:x="27" fg:w="1"/><text x="50.2500%" y="303.50">i..</text></g><g><title>idna::uts46::Idna::to_ascii_inner (1 samples, 1.85%)</title><rect x="50.0000%" y="277" width="1.8519%" height="15" fill="rgb(252,105,26)" fg:x="27" fg:w="1"/><text x="50.2500%" y="287.50">i..</text></g><g><title>idna::uts46::processing (1 samples, 1.85%)</title><rect x="50.0000%" y="261" width="1.8519%" height="15" fill="rgb(220,39,43)" fg:x="27" fg:w="1"/><text x="50.2500%" y="271.50">i..</text></g><g><title>reqwest::async_impl::response::Response::bytes::{{closure}} (1 samples, 1.85%)</title><rect x="51.8519%" y="437" width="1.8519%" height="15" fill="rgb(229,68,48)" fg:x="28" fg:w="1"/><text x="52.1019%" y="447.50">r..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (1 samples, 1.85%)</title><rect x="51.8519%" y="421" width="1.8519%" height="15" fill="rgb(252,8,32)" fg:x="28" fg:w="1"/><text x="52.1019%" y="431.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (1 samples, 1.85%)</title><rect x="51.8519%" y="405" width="1.8519%" height="15" fill="rgb(223,20,43)" fg:x="28" fg:w="1"/><text x="52.1019%" y="415.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1 samples, 1.85%)</title><rect x="51.8519%" y="389" width="1.8519%" height="15" fill="rgb(229,81,49)" fg:x="28" fg:w="1"/><text x="52.1019%" y="399.50">&lt;..</text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1 samples, 1.85%)</title><rect x="51.8519%" y="373" width="1.8519%" height="15" fill="rgb(236,28,36)" fg:x="28" fg:w="1"/><text x="52.1019%" y="383.50">&lt;..</text></g><g><title>hyper::body::body::Body::poll_inner (1 samples, 1.85%)</title><rect x="51.8519%" y="357" width="1.8519%" height="15" fill="rgb(249,185,26)" fg:x="28" fg:w="1"/><text x="52.1019%" y="367.50">h..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 1.85%)</title><rect x="53.7037%" y="341" width="1.8519%" height="15" fill="rgb(249,174,33)" fg:x="29" fg:w="1"/><text x="53.9537%" y="351.50">&lt;..</text></g><g><title>aggregate_api::dapps::minibridge::get_swap_quote::{{closure}} (3 samples, 5.56%)</title><rect x="51.8519%" y="453" width="5.5556%" height="15" fill="rgb(233,201,37)" fg:x="28" fg:w="3"/><text x="52.1019%" y="463.50">aggrega..</text></g><g><title>serde_json::de::from_slice (2 samples, 3.70%)</title><rect x="53.7037%" y="437" width="3.7037%" height="15" fill="rgb(221,78,26)" fg:x="29" fg:w="2"/><text x="53.9537%" y="447.50">serd..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 3.70%)</title><rect x="53.7037%" y="421" width="3.7037%" height="15" fill="rgb(250,127,30)" fg:x="29" fg:w="2"/><text x="53.9537%" y="431.50">&lt;&amp;mu..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (2 samples, 3.70%)</title><rect x="53.7037%" y="405" width="3.7037%" height="15" fill="rgb(230,49,44)" fg:x="29" fg:w="2"/><text x="53.9537%" y="415.50">&lt;&amp;mu..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 3.70%)</title><rect x="53.7037%" y="389" width="3.7037%" height="15" fill="rgb(229,67,23)" fg:x="29" fg:w="2"/><text x="53.9537%" y="399.50">&lt;ser..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 3.70%)</title><rect x="53.7037%" y="373" width="3.7037%" height="15" fill="rgb(249,83,47)" fg:x="29" fg:w="2"/><text x="53.9537%" y="383.50">&lt;ser..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 3.70%)</title><rect x="53.7037%" y="357" width="3.7037%" height="15" fill="rgb(215,43,3)" fg:x="29" fg:w="2"/><text x="53.9537%" y="367.50">&lt;&amp;mu..</text></g><g><title>aggregate_api::dapps::minibridge::_::&lt;impl serde::de::Deserialize for aggregate_api::dapps::minibridge::ChainId&gt;::deserialize (1 samples, 1.85%)</title><rect x="55.5556%" y="341" width="1.8519%" height="15" fill="rgb(238,154,13)" fg:x="30" fg:w="1"/><text x="55.8056%" y="351.50">a..</text></g><g><title>serde::de::Deserializer::__deserialize_content (1 samples, 1.85%)</title><rect x="55.5556%" y="325" width="1.8519%" height="15" fill="rgb(219,56,2)" fg:x="30" fg:w="1"/><text x="55.8056%" y="335.50">s..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 1.85%)</title><rect x="55.5556%" y="309" width="1.8519%" height="15" fill="rgb(233,0,4)" fg:x="30" fg:w="1"/><text x="55.8056%" y="319.50">s..</text></g><g><title>aggregate_api::dapps::native::get_swap_quote::{{closure}} (1 samples, 1.85%)</title><rect x="57.4074%" y="453" width="1.8519%" height="15" fill="rgb(235,30,7)" fg:x="31" fg:w="1"/><text x="57.6574%" y="463.50">a..</text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 1.85%)</title><rect x="57.4074%" y="437" width="1.8519%" height="15" fill="rgb(250,79,13)" fg:x="31" fg:w="1"/><text x="57.6574%" y="447.50">c..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 1.85%)</title><rect x="57.4074%" y="421" width="1.8519%" height="15" fill="rgb(211,146,34)" fg:x="31" fg:w="1"/><text x="57.6574%" y="431.50">a..</text></g><g><title>aggregate_api::dapps::nitro::get_swap_quote::{{closure}} (1 samples, 1.85%)</title><rect x="59.2593%" y="453" width="1.8519%" height="15" fill="rgb(228,22,38)" fg:x="32" fg:w="1"/><text x="59.5093%" y="463.50">a..</text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="437" width="1.8519%" height="15" fill="rgb(235,168,5)" fg:x="32" fg:w="1"/><text x="59.5093%" y="447.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="421" width="1.8519%" height="15" fill="rgb(221,155,16)" fg:x="32" fg:w="1"/><text x="59.5093%" y="431.50">&lt;..</text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="405" width="1.8519%" height="15" fill="rgb(215,215,53)" fg:x="32" fg:w="1"/><text x="59.5093%" y="415.50">&lt;..</text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 1.85%)</title><rect x="59.2593%" y="389" width="1.8519%" height="15" fill="rgb(223,4,10)" fg:x="32" fg:w="1"/><text x="59.5093%" y="399.50">h..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="373" width="1.8519%" height="15" fill="rgb(234,103,6)" fg:x="32" fg:w="1"/><text x="59.5093%" y="383.50">&lt;..</text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="357" width="1.8519%" height="15" fill="rgb(227,97,0)" fg:x="32" fg:w="1"/><text x="59.5093%" y="367.50">&lt;..</text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="341" width="1.8519%" height="15" fill="rgb(234,150,53)" fg:x="32" fg:w="1"/><text x="59.5093%" y="351.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="325" width="1.8519%" height="15" fill="rgb(228,201,54)" fg:x="32" fg:w="1"/><text x="59.5093%" y="335.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="309" width="1.8519%" height="15" fill="rgb(222,22,37)" fg:x="32" fg:w="1"/><text x="59.5093%" y="319.50">&lt;..</text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="293" width="1.8519%" height="15" fill="rgb(237,53,32)" fg:x="32" fg:w="1"/><text x="59.5093%" y="303.50">&lt;..</text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 1.85%)</title><rect x="59.2593%" y="277" width="1.8519%" height="15" fill="rgb(233,25,53)" fg:x="32" fg:w="1"/><text x="59.5093%" y="287.50">r..</text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (1 samples, 1.85%)</title><rect x="59.2593%" y="261" width="1.8519%" height="15" fill="rgb(210,40,34)" fg:x="32" fg:w="1"/><text x="59.5093%" y="271.50">r..</text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="59.2593%" y="245" width="1.8519%" height="15" fill="rgb(241,220,44)" fg:x="32" fg:w="1"/><text x="59.5093%" y="255.50">&lt;..</text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 1.85%)</title><rect x="59.2593%" y="229" width="1.8519%" height="15" fill="rgb(235,28,35)" fg:x="32" fg:w="1"/><text x="59.5093%" y="239.50">n..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 1.85%)</title><rect x="61.1111%" y="437" width="1.8519%" height="15" fill="rgb(210,56,17)" fg:x="33" fg:w="1"/><text x="61.3611%" y="447.50">&lt;..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="62.9630%" y="373" width="1.8519%" height="15" fill="rgb(224,130,29)" fg:x="34" fg:w="1"/><text x="63.2130%" y="383.50">&lt;..</text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="62.9630%" y="357" width="1.8519%" height="15" fill="rgb(235,212,8)" fg:x="34" fg:w="1"/><text x="63.2130%" y="367.50">&lt;..</text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="62.9630%" y="341" width="1.8519%" height="15" fill="rgb(223,33,50)" fg:x="34" fg:w="1"/><text x="63.2130%" y="351.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="62.9630%" y="325" width="1.8519%" height="15" fill="rgb(219,149,13)" fg:x="34" fg:w="1"/><text x="63.2130%" y="335.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="62.9630%" y="309" width="1.8519%" height="15" fill="rgb(250,156,29)" fg:x="34" fg:w="1"/><text x="63.2130%" y="319.50">&lt;..</text></g><g><title>&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="62.9630%" y="293" width="1.8519%" height="15" fill="rgb(216,193,19)" fg:x="34" fg:w="1"/><text x="63.2130%" y="303.50">&lt;..</text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 1.85%)</title><rect x="62.9630%" y="277" width="1.8519%" height="15" fill="rgb(216,135,14)" fg:x="34" fg:w="1"/><text x="63.2130%" y="287.50">r..</text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (1 samples, 1.85%)</title><rect x="62.9630%" y="261" width="1.8519%" height="15" fill="rgb(241,47,5)" fg:x="34" fg:w="1"/><text x="63.2130%" y="271.50">r..</text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="62.9630%" y="245" width="1.8519%" height="15" fill="rgb(233,42,35)" fg:x="34" fg:w="1"/><text x="63.2130%" y="255.50">&lt;..</text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 1.85%)</title><rect x="62.9630%" y="229" width="1.8519%" height="15" fill="rgb(231,13,6)" fg:x="34" fg:w="1"/><text x="63.2130%" y="239.50">n..</text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (2 samples, 3.70%)</title><rect x="62.9630%" y="437" width="3.7037%" height="15" fill="rgb(207,181,40)" fg:x="34" fg:w="2"/><text x="63.2130%" y="447.50">&lt;req..</text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (2 samples, 3.70%)</title><rect x="62.9630%" y="421" width="3.7037%" height="15" fill="rgb(254,173,49)" fg:x="34" fg:w="2"/><text x="63.2130%" y="431.50">&lt;req..</text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (2 samples, 3.70%)</title><rect x="62.9630%" y="405" width="3.7037%" height="15" fill="rgb(221,1,38)" fg:x="34" fg:w="2"/><text x="63.2130%" y="415.50">&lt;hyp..</text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (2 samples, 3.70%)</title><rect x="62.9630%" y="389" width="3.7037%" height="15" fill="rgb(206,124,46)" fg:x="34" fg:w="2"/><text x="63.2130%" y="399.50">hype..</text></g><g><title>hyper::common::exec::Exec::execute (1 samples, 1.85%)</title><rect x="64.8148%" y="373" width="1.8519%" height="15" fill="rgb(249,21,11)" fg:x="35" fg:w="1"/><text x="65.0648%" y="383.50">h..</text></g><g><title>tokio::task::spawn::spawn (1 samples, 1.85%)</title><rect x="64.8148%" y="357" width="1.8519%" height="15" fill="rgb(222,201,40)" fg:x="35" fg:w="1"/><text x="65.0648%" y="367.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (1 samples, 1.85%)</title><rect x="64.8148%" y="341" width="1.8519%" height="15" fill="rgb(235,61,29)" fg:x="35" fg:w="1"/><text x="65.0648%" y="351.50">t..</text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (1 samples, 1.85%)</title><rect x="64.8148%" y="325" width="1.8519%" height="15" fill="rgb(219,207,3)" fg:x="35" fg:w="1"/><text x="65.0648%" y="335.50">t..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 5.56%)</title><rect x="66.6667%" y="325" width="5.5556%" height="15" fill="rgb(222,56,46)" fg:x="36" fg:w="3"/><text x="66.9167%" y="335.50">&lt;serde_..</text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 3.70%)</title><rect x="68.5185%" y="309" width="3.7037%" height="15" fill="rgb(239,76,54)" fg:x="37" fg:w="2"/><text x="68.7685%" y="319.50">&lt;ser..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 1.85%)</title><rect x="72.2222%" y="325" width="1.8519%" height="15" fill="rgb(231,124,27)" fg:x="39" fg:w="1"/><text x="72.4722%" y="335.50">i..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 1.85%)</title><rect x="72.2222%" y="309" width="1.8519%" height="15" fill="rgb(249,195,6)" fg:x="39" fg:w="1"/><text x="72.4722%" y="319.50">&lt;..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (4 samples, 7.41%)</title><rect x="74.0741%" y="325" width="7.4074%" height="15" fill="rgb(237,174,47)" fg:x="40" fg:w="4"/><text x="74.3241%" y="335.50">indexmap::..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 3.70%)</title><rect x="77.7778%" y="309" width="3.7037%" height="15" fill="rgb(206,201,31)" fg:x="42" fg:w="2"/><text x="78.0278%" y="319.50">hash..</text></g><g><title>serde_json::de::from_trait (9 samples, 16.67%)</title><rect x="66.6667%" y="437" width="16.6667%" height="15" fill="rgb(231,57,52)" fg:x="36" fg:w="9"/><text x="66.9167%" y="447.50">serde_json::de::from_trait</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 16.67%)</title><rect x="66.6667%" y="421" width="16.6667%" height="15" fill="rgb(248,177,22)" fg:x="36" fg:w="9"/><text x="66.9167%" y="431.50">serde_json::value::de::&lt;im..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 16.67%)</title><rect x="66.6667%" y="405" width="16.6667%" height="15" fill="rgb(215,211,37)" fg:x="36" fg:w="9"/><text x="66.9167%" y="415.50">&lt;serde_json::value::de::&lt;i..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 16.67%)</title><rect x="66.6667%" y="389" width="16.6667%" height="15" fill="rgb(241,128,51)" fg:x="36" fg:w="9"/><text x="66.9167%" y="399.50">serde_json::value::de::&lt;im..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 16.67%)</title><rect x="66.6667%" y="373" width="16.6667%" height="15" fill="rgb(227,165,31)" fg:x="36" fg:w="9"/><text x="66.9167%" y="383.50">&lt;serde_json::de::SeqAccess..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (9 samples, 16.67%)</title><rect x="66.6667%" y="357" width="16.6667%" height="15" fill="rgb(228,167,24)" fg:x="36" fg:w="9"/><text x="66.9167%" y="367.50">serde_json::value::de::&lt;im..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 16.67%)</title><rect x="66.6667%" y="341" width="16.6667%" height="15" fill="rgb(228,143,12)" fg:x="36" fg:w="9"/><text x="66.9167%" y="351.50">&lt;serde_json::value::de::&lt;i..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="81.4815%" y="325" width="1.8519%" height="15" fill="rgb(249,149,8)" fg:x="44" fg:w="1"/><text x="81.7315%" y="335.50">s..</text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 1.85%)</title><rect x="81.4815%" y="309" width="1.8519%" height="15" fill="rgb(243,35,44)" fg:x="44" fg:w="1"/><text x="81.7315%" y="319.50">&lt;..</text></g><g><title>aggregate_api::dapps::orbiter::get_swap_quote::{{closure}} (13 samples, 24.07%)</title><rect x="61.1111%" y="453" width="24.0741%" height="15" fill="rgb(246,89,9)" fg:x="33" fg:w="13"/><text x="61.3611%" y="463.50">aggregate_api::dapps::orbiter::get_swa..</text></g><g><title>serde_json::value::from_value (1 samples, 1.85%)</title><rect x="83.3333%" y="437" width="1.8519%" height="15" fill="rgb(233,213,13)" fg:x="45" fg:w="1"/><text x="83.5833%" y="447.50">s..</text></g><g><title>serde_json::value::de::visit_array (1 samples, 1.85%)</title><rect x="83.3333%" y="421" width="1.8519%" height="15" fill="rgb(233,141,41)" fg:x="45" fg:w="1"/><text x="83.5833%" y="431.50">s..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 1.85%)</title><rect x="83.3333%" y="405" width="1.8519%" height="15" fill="rgb(239,167,4)" fg:x="45" fg:w="1"/><text x="83.5833%" y="415.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 1.85%)</title><rect x="83.3333%" y="389" width="1.8519%" height="15" fill="rgb(209,217,16)" fg:x="45" fg:w="1"/><text x="83.5833%" y="399.50">s..</text></g><g><title>serde_json::value::de::visit_object (1 samples, 1.85%)</title><rect x="83.3333%" y="373" width="1.8519%" height="15" fill="rgb(219,88,35)" fg:x="45" fg:w="1"/><text x="83.5833%" y="383.50">s..</text></g><g><title>aggregate_api::dapps::rango::get_swap_quote::{{closure}} (2 samples, 3.70%)</title><rect x="85.1852%" y="453" width="3.7037%" height="15" fill="rgb(220,193,23)" fg:x="46" fg:w="2"/><text x="85.4352%" y="463.50">aggr..</text></g><g><title>aggregate_api::dapps::rango::find_token_data (2 samples, 3.70%)</title><rect x="85.1852%" y="437" width="3.7037%" height="15" fill="rgb(230,90,52)" fg:x="46" fg:w="2"/><text x="85.4352%" y="447.50">aggr..</text></g><g><title>std::sys::sync::once::futex::Once::call (2 samples, 3.70%)</title><rect x="85.1852%" y="421" width="3.7037%" height="15" fill="rgb(252,106,19)" fg:x="46" fg:w="2"/><text x="85.4352%" y="431.50">std:..</text></g><g><title>serde_json::de::from_trait (2 samples, 3.70%)</title><rect x="85.1852%" y="405" width="3.7037%" height="15" fill="rgb(206,74,20)" fg:x="46" fg:w="2"/><text x="85.4352%" y="415.50">serd..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 3.70%)</title><rect x="85.1852%" y="389" width="3.7037%" height="15" fill="rgb(230,138,44)" fg:x="46" fg:w="2"/><text x="85.4352%" y="399.50">serd..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 3.70%)</title><rect x="85.1852%" y="373" width="3.7037%" height="15" fill="rgb(235,182,43)" fg:x="46" fg:w="2"/><text x="85.4352%" y="383.50">&lt;ser..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 3.70%)</title><rect x="85.1852%" y="357" width="3.7037%" height="15" fill="rgb(242,16,51)" fg:x="46" fg:w="2"/><text x="85.4352%" y="367.50">serd..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 3.70%)</title><rect x="85.1852%" y="341" width="3.7037%" height="15" fill="rgb(248,9,4)" fg:x="46" fg:w="2"/><text x="85.4352%" y="351.50">&lt;ser..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 3.70%)</title><rect x="85.1852%" y="325" width="3.7037%" height="15" fill="rgb(210,31,22)" fg:x="46" fg:w="2"/><text x="85.4352%" y="335.50">serd..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 3.70%)</title><rect x="85.1852%" y="309" width="3.7037%" height="15" fill="rgb(239,54,39)" fg:x="46" fg:w="2"/><text x="85.4352%" y="319.50">&lt;ser..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (2 samples, 3.70%)</title><rect x="85.1852%" y="293" width="3.7037%" height="15" fill="rgb(230,99,41)" fg:x="46" fg:w="2"/><text x="85.4352%" y="303.50">inde..</text></g><g><title>aggregate_api::dapps::relay::get_swap_quote::{{closure}} (1 samples, 1.85%)</title><rect x="88.8889%" y="453" width="1.8519%" height="15" fill="rgb(253,106,12)" fg:x="48" fg:w="1"/><text x="89.1389%" y="463.50">a..</text></g><g><title>serde_json::de::from_str (1 samples, 1.85%)</title><rect x="88.8889%" y="437" width="1.8519%" height="15" fill="rgb(213,46,41)" fg:x="48" fg:w="1"/><text x="89.1389%" y="447.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 1.85%)</title><rect x="88.8889%" y="421" width="1.8519%" height="15" fill="rgb(215,133,35)" fg:x="48" fg:w="1"/><text x="89.1389%" y="431.50">&lt;..</text></g><g><title>aggregate_api::dapps::sushiswap::get_swap_quote::{{closure}} (1 samples, 1.85%)</title><rect x="90.7407%" y="453" width="1.8519%" height="15" fill="rgb(213,28,5)" fg:x="49" fg:w="1"/><text x="90.9907%" y="463.50">a..</text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="90.7407%" y="437" width="1.8519%" height="15" fill="rgb(215,77,49)" fg:x="49" fg:w="1"/><text x="90.9907%" y="447.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="90.7407%" y="421" width="1.8519%" height="15" fill="rgb(248,100,22)" fg:x="49" fg:w="1"/><text x="90.9907%" y="431.50">&lt;..</text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="90.7407%" y="405" width="1.8519%" height="15" fill="rgb(208,67,9)" fg:x="49" fg:w="1"/><text x="90.9907%" y="415.50">&lt;..</text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 1.85%)</title><rect x="90.7407%" y="389" width="1.8519%" height="15" fill="rgb(219,133,21)" fg:x="49" fg:w="1"/><text x="90.9907%" y="399.50">h..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="90.7407%" y="373" width="1.8519%" height="15" fill="rgb(246,46,29)" fg:x="49" fg:w="1"/><text x="90.9907%" y="383.50">&lt;..</text></g><g><title>&lt;hyper::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="90.7407%" y="357" width="1.8519%" height="15" fill="rgb(246,185,52)" fg:x="49" fg:w="1"/><text x="90.9907%" y="367.50">&lt;..</text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="90.7407%" y="341" width="1.8519%" height="15" fill="rgb(252,136,11)" fg:x="49" fg:w="1"/><text x="90.9907%" y="351.50">&lt;..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="90.7407%" y="325" width="1.8519%" height="15" fill="rgb(219,138,53)" fg:x="49" fg:w="1"/><text x="90.9907%" y="335.50">&lt;..</text></g><g><title>aggregate_api::dapps::wowmax::get_swap_quote::{{closure}} (1 samples, 1.85%)</title><rect x="92.5926%" y="453" width="1.8519%" height="15" fill="rgb(211,51,23)" fg:x="50" fg:w="1"/><text x="92.8426%" y="463.50">a..</text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="92.5926%" y="437" width="1.8519%" height="15" fill="rgb(247,221,28)" fg:x="50" fg:w="1"/><text x="92.8426%" y="447.50">&lt;..</text></g><g><title>&lt;tokio::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="92.5926%" y="421" width="1.8519%" height="15" fill="rgb(251,222,45)" fg:x="50" fg:w="1"/><text x="92.8426%" y="431.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="92.5926%" y="405" width="1.8519%" height="15" fill="rgb(217,162,53)" fg:x="50" fg:w="1"/><text x="92.8426%" y="415.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="92.5926%" y="389" width="1.8519%" height="15" fill="rgb(229,93,14)" fg:x="50" fg:w="1"/><text x="92.8426%" y="399.50">&lt;..</text></g><g><title>&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 1.85%)</title><rect x="92.5926%" y="373" width="1.8519%" height="15" fill="rgb(209,67,49)" fg:x="50" fg:w="1"/><text x="92.8426%" y="383.50">&lt;..</text></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 1.85%)</title><rect x="92.5926%" y="357" width="1.8519%" height="15" fill="rgb(213,87,29)" fg:x="50" fg:w="1"/><text x="92.8426%" y="367.50">h..</text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::pool::Pooled&lt;hyper::client::client::PoolClient&lt;reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (1 samples, 1.85%)</title><rect x="92.5926%" y="341" width="1.8519%" height="15" fill="rgb(205,151,52)" fg:x="50" fg:w="1"/><text x="92.8426%" y="351.50">c..</text></g><g><title>&lt;hyper::client::pool::Pooled&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.85%)</title><rect x="92.5926%" y="325" width="1.8519%" height="15" fill="rgb(253,215,39)" fg:x="50" fg:w="1"/><text x="92.8426%" y="335.50">&lt;..</text></g><g><title>hyper::client::pool::PoolInner&lt;T&gt;::put (1 samples, 1.85%)</title><rect x="92.5926%" y="309" width="1.8519%" height="15" fill="rgb(221,220,41)" fg:x="50" fg:w="1"/><text x="92.8426%" y="319.50">h..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 1.85%)</title><rect x="92.5926%" y="293" width="1.8519%" height="15" fill="rgb(218,133,21)" fg:x="50" fg:w="1"/><text x="92.8426%" y="303.50">h..</text></g><g><title>aggregate_api::utils::utils::get_random_proxy_client (1 samples, 1.85%)</title><rect x="94.4444%" y="437" width="1.8519%" height="15" fill="rgb(221,193,43)" fg:x="51" fg:w="1"/><text x="94.6944%" y="447.50">a..</text></g><g><title>rand::seq::IteratorRandom::choose (1 samples, 1.85%)</title><rect x="94.4444%" y="421" width="1.8519%" height="15" fill="rgb(240,128,52)" fg:x="51" fg:w="1"/><text x="94.6944%" y="431.50">r..</text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.85%)</title><rect x="94.4444%" y="405" width="1.8519%" height="15" fill="rgb(253,114,12)" fg:x="51" fg:w="1"/><text x="94.6944%" y="415.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 1.85%)</title><rect x="94.4444%" y="389" width="1.8519%" height="15" fill="rgb(215,223,47)" fg:x="51" fg:w="1"/><text x="94.6944%" y="399.50">a..</text></g><g><title>&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (29 samples, 53.70%)</title><rect x="44.4444%" y="549" width="53.7037%" height="15" fill="rgb(248,225,23)" fg:x="24" fg:w="29"/><text x="44.6944%" y="559.50">&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;futures_util::stream::stream::collect::Collect&lt;St,C&gt; as core::future::future::Future&gt;::poll (29 samples, 53.70%)</title><rect x="44.4444%" y="533" width="53.7037%" height="15" fill="rgb(250,108,0)" fg:x="24" fg:w="29"/><text x="44.6944%" y="543.50">&lt;futures_util::stream::stream::collect::Collect&lt;St,C&gt; as core::future::future::Future&gt;::p..</text></g><g><title>&lt;futures_util::stream::futures_ordered::FuturesOrdered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (29 samples, 53.70%)</title><rect x="44.4444%" y="517" width="53.7037%" height="15" fill="rgb(228,208,7)" fg:x="24" fg:w="29"/><text x="44.6944%" y="527.50">&lt;futures_util::stream::futures_ordered::FuturesOrdered&lt;Fut&gt; as futures_core::stream::Stre..</text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (29 samples, 53.70%)</title><rect x="44.4444%" y="501" width="53.7037%" height="15" fill="rgb(244,45,10)" fg:x="24" fg:w="29"/><text x="44.6944%" y="511.50">&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::..</text></g><g><title>&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 53.70%)</title><rect x="44.4444%" y="485" width="53.7037%" height="15" fill="rgb(207,125,25)" fg:x="24" fg:w="29"/><text x="44.6944%" y="495.50">&lt;futures_util::stream::futures_ordered::OrderWrapper&lt;T&gt; as core::future::future::Future&gt;:..</text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 53.70%)</title><rect x="44.4444%" y="469" width="53.7037%" height="15" fill="rgb(210,195,18)" fg:x="24" fg:w="29"/><text x="44.6944%" y="479.50">&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>aggregate_api::dapps::xy::get_swap_quote::{{closure}} (2 samples, 3.70%)</title><rect x="94.4444%" y="453" width="3.7037%" height="15" fill="rgb(249,80,12)" fg:x="51" fg:w="2"/><text x="94.6944%" y="463.50">aggr..</text></g><g><title>serde_json::de::from_trait (1 samples, 1.85%)</title><rect x="96.2963%" y="437" width="1.8519%" height="15" fill="rgb(221,65,9)" fg:x="52" fg:w="1"/><text x="96.5463%" y="447.50">s..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="96.2963%" y="421" width="1.8519%" height="15" fill="rgb(235,49,36)" fg:x="52" fg:w="1"/><text x="96.5463%" y="431.50">s..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 1.85%)</title><rect x="96.2963%" y="405" width="1.8519%" height="15" fill="rgb(225,32,20)" fg:x="52" fg:w="1"/><text x="96.5463%" y="415.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="96.2963%" y="389" width="1.8519%" height="15" fill="rgb(215,141,46)" fg:x="52" fg:w="1"/><text x="96.5463%" y="399.50">s..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 1.85%)</title><rect x="96.2963%" y="373" width="1.8519%" height="15" fill="rgb(250,160,47)" fg:x="52" fg:w="1"/><text x="96.5463%" y="383.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 1.85%)</title><rect x="96.2963%" y="357" width="1.8519%" height="15" fill="rgb(216,222,40)" fg:x="52" fg:w="1"/><text x="96.5463%" y="367.50">s..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 1.85%)</title><rect x="96.2963%" y="341" width="1.8519%" height="15" fill="rgb(234,217,39)" fg:x="52" fg:w="1"/><text x="96.5463%" y="351.50">&lt;..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 1.85%)</title><rect x="96.2963%" y="325" width="1.8519%" height="15" fill="rgb(207,178,40)" fg:x="52" fg:w="1"/><text x="96.5463%" y="335.50">i..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 1.85%)</title><rect x="96.2963%" y="309" width="1.8519%" height="15" fill="rgb(221,136,13)" fg:x="52" fg:w="1"/><text x="96.5463%" y="319.50">&lt;..</text></g><g><title>all (54 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="54"/><text x="0.2500%" y="783.50"></text></g><g><title>tokio-runtime-w (51 samples, 94.44%)</title><rect x="5.5556%" y="757" width="94.4444%" height="15" fill="rgb(249,222,13)" fg:x="3" fg:w="51"/><text x="5.8056%" y="767.50">tokio-runtime-w</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (51 samples, 94.44%)</title><rect x="5.5556%" y="741" width="94.4444%" height="15" fill="rgb(244,185,38)" fg:x="3" fg:w="51"/><text x="5.8056%" y="751.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (51 samples, 94.44%)</title><rect x="5.5556%" y="725" width="94.4444%" height="15" fill="rgb(236,202,9)" fg:x="3" fg:w="51"/><text x="5.8056%" y="735.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (51 samples, 94.44%)</title><rect x="5.5556%" y="709" width="94.4444%" height="15" fill="rgb(250,229,37)" fg:x="3" fg:w="51"/><text x="5.8056%" y="719.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (51 samples, 94.44%)</title><rect x="5.5556%" y="693" width="94.4444%" height="15" fill="rgb(206,174,23)" fg:x="3" fg:w="51"/><text x="5.8056%" y="703.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (51 samples, 94.44%)</title><rect x="5.5556%" y="677" width="94.4444%" height="15" fill="rgb(211,33,43)" fg:x="3" fg:w="51"/><text x="5.8056%" y="687.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (51 samples, 94.44%)</title><rect x="5.5556%" y="661" width="94.4444%" height="15" fill="rgb(245,58,50)" fg:x="3" fg:w="51"/><text x="5.8056%" y="671.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (51 samples, 94.44%)</title><rect x="5.5556%" y="645" width="94.4444%" height="15" fill="rgb(244,68,36)" fg:x="3" fg:w="51"/><text x="5.8056%" y="655.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (51 samples, 94.44%)</title><rect x="5.5556%" y="629" width="94.4444%" height="15" fill="rgb(232,229,15)" fg:x="3" fg:w="51"/><text x="5.8056%" y="639.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (51 samples, 94.44%)</title><rect x="5.5556%" y="613" width="94.4444%" height="15" fill="rgb(254,30,23)" fg:x="3" fg:w="51"/><text x="5.8056%" y="623.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (46 samples, 85.19%)</title><rect x="14.8148%" y="597" width="85.1852%" height="15" fill="rgb(235,160,14)" fg:x="8" fg:w="46"/><text x="15.0648%" y="607.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::raw::poll (32 samples, 59.26%)</title><rect x="40.7407%" y="581" width="59.2593%" height="15" fill="rgb(212,155,44)" fg:x="22" fg:w="32"/><text x="40.9907%" y="591.50">tokio::runtime::task::raw::poll</text></g><g><title>aggregate_api::services::quote_router::route_quote::{{closure}} (30 samples, 55.56%)</title><rect x="44.4444%" y="565" width="55.5556%" height="15" fill="rgb(226,2,50)" fg:x="24" fg:w="30"/><text x="44.6944%" y="575.50">aggregate_api::services::quote_router::route_quote::{{closure}}</text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 1.85%)</title><rect x="98.1481%" y="549" width="1.8519%" height="15" fill="rgb(234,177,6)" fg:x="53" fg:w="1"/><text x="98.3981%" y="559.50">s..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 1.85%)</title><rect x="98.1481%" y="533" width="1.8519%" height="15" fill="rgb(217,24,9)" fg:x="53" fg:w="1"/><text x="98.3981%" y="543.50">s..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 1.85%)</title><rect x="98.1481%" y="517" width="1.8519%" height="15" fill="rgb(220,13,46)" fg:x="53" fg:w="1"/><text x="98.3981%" y="527.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 1.85%)</title><rect x="98.1481%" y="501" width="1.8519%" height="15" fill="rgb(239,221,27)" fg:x="53" fg:w="1"/><text x="98.3981%" y="511.50">s..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 1.85%)</title><rect x="98.1481%" y="485" width="1.8519%" height="15" fill="rgb(222,198,25)" fg:x="53" fg:w="1"/><text x="98.3981%" y="495.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 1.85%)</title><rect x="98.1481%" y="469" width="1.8519%" height="15" fill="rgb(211,99,13)" fg:x="53" fg:w="1"/><text x="98.3981%" y="479.50">s..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 1.85%)</title><rect x="98.1481%" y="453" width="1.8519%" height="15" fill="rgb(232,111,31)" fg:x="53" fg:w="1"/><text x="98.3981%" y="463.50">&lt;..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 1.85%)</title><rect x="98.1481%" y="437" width="1.8519%" height="15" fill="rgb(245,82,37)" fg:x="53" fg:w="1"/><text x="98.3981%" y="447.50">i..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 1.85%)</title><rect x="98.1481%" y="421" width="1.8519%" height="15" fill="rgb(227,149,46)" fg:x="53" fg:w="1"/><text x="98.3981%" y="431.50">h..</text></g></svg></svg>